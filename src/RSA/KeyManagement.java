/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RSA; 

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.border.Border;

/**
 *
 * @author Mvami N. Jonalex
 */
public class KeyManagement extends javax.swing.JDialog {

    /**
     * Creates new form KeyManagement
     * @param parent
     * @param modal
     */
    //<editor-fold defaultstate="collapsed" desc="constructor">
    public KeyManagement(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        frame = BorderFactory.createLineBorder(Color.BLUE);
        
        initComponents();
        initKeys();
        initButtons(keyChoosed);
    }
//</editor-fold>
    
    /**
     *
     * @return
     */
    
    /*    public RsaKey getSelectedKey(){
    return keysList.get(preIdNum);
    }*/
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ListOfKeysWithScpnPnl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListOfKeysPnl = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        UseKeyBtn = new javax.swing.JButton();
        GenerateKeyBtn = new javax.swing.JButton();
        InsertKeyBtn = new javax.swing.JButton();
        DeleteKeyBtn = new javax.swing.JButton();
        ExportKeyBtn = new javax.swing.JButton();
        DetailsOnKeyBtn = new javax.swing.JButton();
        ActualizeBtn = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Générer Une Nouvelle Clé");
        setBackground(new java.awt.Color(22, 14, 32));
        setFocusTraversalPolicyProvider(true);
        setForeground(java.awt.Color.white);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Gestion des clés"));

        ListOfKeysWithScpnPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), " Vos Clés : "));
        ListOfKeysWithScpnPnl.setLayout(new java.awt.GridLayout(0, 1));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout ListOfKeysPnlLayout = new javax.swing.GroupLayout(ListOfKeysPnl);
        ListOfKeysPnl.setLayout(ListOfKeysPnlLayout);
        ListOfKeysPnlLayout.setHorizontalGroup(
            ListOfKeysPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 301, Short.MAX_VALUE)
        );
        ListOfKeysPnlLayout.setVerticalGroup(
            ListOfKeysPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 222, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(ListOfKeysPnl);

        ListOfKeysWithScpnPnl.add(jScrollPane1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), " Option : "));

        UseKeyBtn.setText("Utiliser");
        UseKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseKeyBtnActionPerformed(evt);
            }
        });

        GenerateKeyBtn.setText("Générer une nouvelle clé");
        GenerateKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateKeyBtnActionPerformed(evt);
            }
        });

        InsertKeyBtn.setText("Insérer une nouvelle clé");
        InsertKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertKeyBtnActionPerformed(evt);
            }
        });

        DeleteKeyBtn.setText("Supprimer");
        DeleteKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteKeyBtnActionPerformed(evt);
            }
        });

        ExportKeyBtn.setText("Exporter");
        ExportKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportKeyBtnActionPerformed(evt);
            }
        });

        DetailsOnKeyBtn.setText("Détails");
        DetailsOnKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailsOnKeyBtnActionPerformed(evt);
            }
        });

        ActualizeBtn.setBackground(new java.awt.Color(22, 14, 32));
        ActualizeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RSA/Icons/reload.png"))); // NOI18N
        ActualizeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(ExportKeyBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DeleteKeyBtn))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(InsertKeyBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(GenerateKeyBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(UseKeyBtn)
                                .addComponent(DetailsOnKeyBtn))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ActualizeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(UseKeyBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DetailsOnKeyBtn))
                    .addComponent(ActualizeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(GenerateKeyBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(InsertKeyBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExportKeyBtn)
                    .addComponent(DeleteKeyBtn))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ListOfKeysWithScpnPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ListOfKeysWithScpnPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void DetailsOnKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailsOnKeyBtnActionPerformed
        // TODO add your handling code here:
        KeyDetails dialog = new KeyDetails(this, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
        dialog.setListInfo(keysList.get(preIdNum).getListInfo());
        dialog.displayDetails();
        dialog.setVisible(true);
    }//GEN-LAST:event_DetailsOnKeyBtnActionPerformed

    private void DeleteKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteKeyBtnActionPerformed
        // TODO add your handling code here:
        boolean flag = false;
        
        for(RsaKey key: keysList){
            if(key.getSelected()){
                flag = true;
            }
            if(flag) break;
        }
        
        if(flag){
            int displacement = 0;
            for(RsaKey key: keysList){
                if(key.getSelected()){
                    deleteKey(key.getId()-displacement);
                    displacement++;
                }
            }

            ListOfKeysPnl.removeAll();
            ListOfKeysPnl.repaint();
            preIdNum = 0;
            initKeys();
        }
        else{
            Message dialog = new Message(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setIcon("src/RSA/Icons/about32.png");
                dialog.setMessage("Sélectioner au préalable de(s) clé(s)!");
                dialog.displayMessage();
                dialog.setVisible(true);
        }
        
    }//GEN-LAST:event_DeleteKeyBtnActionPerformed

    private void UseKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseKeyBtnActionPerformed
        // TODO add your handling code here:
        // Placing the selected key to be used ahead of keysfile
        RearranderKeyOrder(preIdNum);
        ListOfKeysPnl.removeAll();
        ListOfKeysPnl.repaint();
        preIdNum = 0;
        initKeys();
        dispose();
    }//GEN-LAST:event_UseKeyBtnActionPerformed

    private void InsertKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertKeyBtnActionPerformed
        // TODO add your handling code here:
        KeyInsertion dialog = new KeyInsertion(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setVisible(true);
                
                ListOfKeysPnl.removeAll();
                ListOfKeysPnl.repaint();
                preIdNum = 0;
                initKeys();
    }//GEN-LAST:event_InsertKeyBtnActionPerformed

    private void GenerateKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateKeyBtnActionPerformed
        // TODO add your handling code here:
        KeyGeneration dialog = new KeyGeneration(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setVisible(true);
                
                ListOfKeysPnl.removeAll();
                ListOfKeysPnl.repaint();
                preIdNum = 0;
                initKeys();
    }//GEN-LAST:event_GenerateKeyBtnActionPerformed

    private void ActualizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizeBtnActionPerformed
        // TODO add your handling code here:
        ListOfKeysPnl.removeAll();
        ListOfKeysPnl.repaint();
        preIdNum = 0;
        initKeys();
        UseKeyBtn.setEnabled(false);
        DetailsOnKeyBtn.setEnabled(false);
    }//GEN-LAST:event_ActualizeBtnActionPerformed

    private void ExportKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportKeyBtnActionPerformed
        // TODO add your handling code here:
        String built = buildText();
        
        if(built == null){
            Message dialog = new Message(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setIcon("src/RSA/Icons/about32.png");
                dialog.setMessage("Sélectioner au préalable de(s) clé(s)!");
                dialog.displayMessage();
                dialog.setVisible(true);
        }
        else{
            boolean writable = false;
            OverWrite oW = new OverWrite(this, true);
            do{
                FileChooser dialog = new FileChooser(this);
                url = dialog.saveFile();


                if(!(url == null)){

                    //<editor-fold defaultstate="collapsed" desc="not necessary; left for repairs">
        //            //getting the file name from user
        //            SavaName name = new SavaName(this, true);
        //            name.addWindowListener(new java.awt.event.WindowAdapter() {
        //                        @Override
        //                        public void windowClosing(java.awt.event.WindowEvent e) {
        //                        }
        //                    });
        //            name.setVisible(true);

        //            //completing the fil path
        //            url = url.substring(0, url.length()-1)+name.getSaveName()+name.getExtension()+"\"";
        //</editor-fold>


                    File f = new File(url);

                    try {

                        if(f.exists()){


                            oW.addWindowListener(new java.awt.event.WindowAdapter() {
                                @Override
                                public void windowClosing(java.awt.event.WindowEvent e) {
                                }
                            });
                            oW.setVisible(true);

                            if(oW.getOverWrite()){
                                f.delete();
                                f.createNewFile();
                                writable = true;
                            }
                        }
                        else{

                            if(!(f.getParentFile().exists())){
                                f.getParentFile().mkdirs();
                            }
                            f.createNewFile();
                            writable = true;
                        }

                    } catch (IOException ex) {
                        System.out.println(ex.toString());
                    }
                }
            }while(!(oW.getOverWrite()||writable));

            if(writable){
                writeText(buildText(),url);
            }
        }
        
    }//GEN-LAST:event_ExportKeyBtnActionPerformed
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(KeyManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(KeyManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(KeyManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(KeyManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                KeyManagement dialog = new KeyManagement(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
////                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    
    //<editor-fold defaultstate="collapsed" desc="Properties">
    private final Border frame;
    private int preIdNum = 0;
    private boolean keyChoosed = false;
    private ArrayList <String> KeysListArray;
    private ArrayList <RsaKey> keysList;
    
    private CurrentUser user = new CurrentUser();
    
    private String url;
    
    private int keyCounter = 0;
//</editor-fold>
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton ActualizeBtn;
    private javax.swing.JButton DeleteKeyBtn;
    private javax.swing.JButton DetailsOnKeyBtn;
    private javax.swing.JButton ExportKeyBtn;
    private javax.swing.JButton GenerateKeyBtn;
    private javax.swing.JButton InsertKeyBtn;
    private javax.swing.JPanel ListOfKeysPnl;
    private javax.swing.JPanel ListOfKeysWithScpnPnl;
    private javax.swing.JButton UseKeyBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    //<editor-fold defaultstate="collapsed" desc="methods">
    private void initKeys(){

        Dimension size;
        keysList = new ArrayList();
        
        Fichier keysFile = new Fichier();
        String readLine;
        keysFile.openInRead("Data/Users/User_id"+user.getUserId()+"/Keys/Keys.txt");
        int i=0;
        do{
            readLine = keysFile.read();
            if(readLine != null){
                keysList.add(new RsaKey(keysFile.extractData(readLine,";"),i));
                      
                size = keysList.get(i).getPreferredSize();
                keysList.get(i).setBounds(0, i*(size.height), size.width, size.height);
                ListOfKeysPnl.add(keysList.get(i));
            
                size.setSize(size.width, (i+1)*(size.height));
                ListOfKeysPnl.setPreferredSize(size);
                ListOfKeysPnl.validate();
                
                keysList.get(i).addMouseListener(new java.awt.event.MouseAdapter() {
                        @Override
                        public void mouseReleased(java.awt.event.MouseEvent evt) {
                             keysMouseReleased(evt);
                        }

                    private void keysMouseReleased(MouseEvent evt) {
                        
                        RsaKey selectedKey = (RsaKey) evt.getSource();
                        int idNum = selectedKey.getId();
                        System.out.println(" numero : " +idNum);
                        keysList.get(preIdNum).setBorder(null);
                        preIdNum = idNum;
                        keysList.get(idNum).setBorder(frame);
                        keyChoosed = true;
                        initButtons(keyChoosed);
                    }
                    });
                i++;
            }
        }while(readLine != null);
//        keysList.get(preIdNum).setBorder(frame);
        
    }
    
    private void initButtons(boolean keyChoosed) {
        if(keyChoosed){
            UseKeyBtn.setEnabled(true);
            DetailsOnKeyBtn.setEnabled(true);
        }
        else{
            UseKeyBtn.setEnabled(false);
            DetailsOnKeyBtn.setEnabled(false);
        }
    }
    
    private void RearranderKeyOrder(int id) {
        readKeys();
        
        arrangeKeys(id);
        
        writeKeys();
    }
    
    private void writeKeys() {
        Fichier f = new Fichier();
        // Open in write mode
        f.openInWrite("Data/Users/User_id"+user.getUserId()+"/Keys/Keys.txt");
        // Go through the array
        for (String elt : KeysListArray) {
            // Ecrire l'élément (contact) courant
            f.write(elt);
        }
        // Fermer le fichier
        f.closeFile();
    }
    
    private void readKeys() {
        KeysListArray = new ArrayList();
        Fichier f = new Fichier();
        // Open file in read mode
        f.openInRead("Data/Users/User_id"+user.getUserId()+"/Keys/Keys.txt");
        String readLine;
        // do ...
        do {
            // read line
            readLine = f.read();
            if (readLine != null){
                //Add read line to array list
                KeysListArray.add(readLine);
            }
            // ... while the read line is not null.
        } while (readLine != null);
        f.closeFile();
    }
    
    
    private void arrangeKeys(int id) {
        String tmp, tmpsel;
        tmpsel = keysList.get(id).getListInfo()[0]+";"+keysList.get(id).getListInfo()[1]+";"+keysList.get(id).getListInfo()[2]+";"+keysList.get(id).getListInfo()[3]+";"+keysList.get(id).getListInfo()[4];
        
        tmp = KeysListArray.get(0);
        KeysListArray.set(0,tmpsel);
        KeysListArray.set(id,tmp);
    }
    
    private void deleteKey(int id) {
        readKeys();
        
        KeysListArray.remove(id);
        
        writeKeys();
    }
    
    private String buildText() {
        String[] info = new String[5];
        String built = "";
        keyCounter = 0;
        
        built += "\t Clés exportés \n";
        built += "************************************\n";
        built += "Utilsateur: "+user.getFirstName()+" "+user.getLastName()+"\n";
        built += ">>>\n";
        built += "\n";
        built += "-------------------------\n";
        built += "";
        
        
        for(RsaKey key: keysList){
            if(key.getSelected()){
                built += "Description: \t Nom: "+key.getListInfo()[0]+"  Taille: "+key.getListInfo()[1]+"bits\n";
                built += "Clé public: ("+key.getListInfo()[2]+", "+key.getListInfo()[4]+")\n";
                built += "Clé privée: ("+key.getListInfo()[3]+", "+key.getListInfo()[4]+")\n";
                built += "\n";
                built += "-------------------------\n";
                built += "";
                
                keyCounter++;
            }
        }
        
        built += "!!! "+keyCounter+" "+(keyCounter < 2 ? "Clé":"Clés");
        if(keyCounter == 0) return null;
        else return built;
    }
    
    //<editor-fold defaultstate="collapsed" desc="Writes a String into the specified file url">
    private void writeText(String text, String url) {
        Fichier file = new Fichier();
        // Open in write mode
        file.openInWrite(url);
        //Write the text
        file.writeL(text);
        // Close the file
        file.closeFile();
    }
//</editor-fold>
//</editor-fold>
}
