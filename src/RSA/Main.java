/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RSA;

import Hash.SHA256;
import Hash.Whirlpool;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;


/**
 *
 * @author Mvami N. Jonalex
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
        
    //<editor-fold defaultstate="collapsed" desc="constructor">
    public Main() {
        logOn();
        initComponents();
        
        initAll();
        
        user = new CurrentUser();
        displayUserInfo();
        
        setProperties();
        displayInUseKey();
//        CloseSessionBtn.setEnabled(false);
    }
    
    public void setInUseKey(RsaKey tmp){
        inUseKey = tmp;
    }
    
    public RsaKey getInUseKey(){
        return inUseKey;
    }
    
    public void setPublicKey(BigInteger tmp){
        publicKey = tmp;
    }
    
    public void setPrivateKey(BigInteger tmp){
        privateKey = tmp;
    }
    
    public void setModulus(BigInteger tmp){
        modulus = tmp;
    }
    
    public void setKeySize(int tmp){
        keySize = tmp;
    }
    
    public BigInteger getPublicKey(){
        return publicKey;
    }
    
    public BigInteger getPrivateKey(){
        return privateKey;
    }
    
    public BigInteger getModulus(){
        return modulus;
    }
    
    public int getKeySize(){
        return keySize;
    }
    
//</editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CiphGrpBtg = new javax.swing.ButtonGroup();
        DeciphGrpBtg = new javax.swing.ButtonGroup();
        HashGrpBtg = new javax.swing.ButtonGroup();
        SignGrpBtg = new javax.swing.ButtonGroup();
        HashMethodBtg_Hashing = new javax.swing.ButtonGroup();
        HashMethodBtg_Signing = new javax.swing.ButtonGroup();
        AuthentGrpBtg = new javax.swing.ButtonGroup();
        HashMethodBtg_Authenticating = new javax.swing.ButtonGroup();
        MainPnl = new javax.swing.JPanel();
        TabbedPne = new javax.swing.JTabbedPane();
        SessionPnl = new javax.swing.JPanel();
        SessionLbl = new javax.swing.JLabel();
        UserIdentifierLbl = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        PublicKeyLbl = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        PrivateKeyLbl = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        ModulusLbl = new javax.swing.JLabel();
        KeyDescriptionLbl = new javax.swing.JLabel();
        KeyDetailsBtn = new javax.swing.JButton();
        ChangeKeyBtn = new javax.swing.JButton();
        KeyIdentifierLbl = new javax.swing.JLabel();
        KeySizeLbl = new javax.swing.JLabel();
        RefreshBtn = new javax.swing.JToggleButton();
        CloseSessionBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        jLabel2 = new javax.swing.JLabel();
        UserName = new javax.swing.JLabel();
        UserDOB = new javax.swing.JLabel();
        UserEmail = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ImageLbl = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        CipheringPnl = new javax.swing.JPanel();
        CiphTextRbtn = new javax.swing.JRadioButton();
        CiphFileRbtn = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CiphTextTaa = new javax.swing.JTextArea();
        CiphFileLbl = new javax.swing.JLabel();
        CiphFilePathTfd = new javax.swing.JTextField();
        CiphBrowseBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        CipheredTaa = new javax.swing.JTextArea();
        CipheredLbl = new javax.swing.JLabel();
        CiphFileSaveLbl = new javax.swing.JLabel();
        CiphFilePathSaveTfd = new javax.swing.JTextField();
        CipherBtn = new javax.swing.JButton();
        CiphClearBtn = new javax.swing.JButton();
        CiphSaveBtn = new javax.swing.JButton();
        DecipheringPnl = new javax.swing.JPanel();
        DecipheringPnl1 = new javax.swing.JPanel();
        DeciphTextRbtn = new javax.swing.JRadioButton();
        DeciphFileRbtn = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        DeciphTextTaa = new javax.swing.JTextArea();
        DeciphFileLbl = new javax.swing.JLabel();
        DeciphFilePathTfd = new javax.swing.JTextField();
        DeciphBrowseBtn = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        DecipheredTaa = new javax.swing.JTextArea();
        DecipheredLbl = new javax.swing.JLabel();
        DeciphFileSaveLbl = new javax.swing.JLabel();
        DeciphFilePathSaveTfd = new javax.swing.JTextField();
        DecipherBtn = new javax.swing.JButton();
        DeciphClearBtn = new javax.swing.JButton();
        DeciphSaveBtn = new javax.swing.JButton();
        HashingPnl = new javax.swing.JPanel();
        HashingPnl1 = new javax.swing.JPanel();
        HashTextRbtn = new javax.swing.JRadioButton();
        HashFileRbtn = new javax.swing.JRadioButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        HashTextTaa = new javax.swing.JTextArea();
        HashFileLbl = new javax.swing.JLabel();
        HashFilePathTfd = new javax.swing.JTextField();
        HashBrowseBtn = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane6 = new javax.swing.JScrollPane();
        HashCodeTaa = new javax.swing.JTextArea();
        HashCodeLbl = new javax.swing.JLabel();
        HashFileSaveLbl = new javax.swing.JLabel();
        HashFilePathSaveTfd = new javax.swing.JTextField();
        HashBtn = new javax.swing.JButton();
        HashClearBtn = new javax.swing.JButton();
        HashSaveBtn = new javax.swing.JButton();
        HashSHA256Rbtn = new javax.swing.JRadioButton();
        HashWhirlpoolRbtn = new javax.swing.JRadioButton();
        SigningPnl = new javax.swing.JPanel();
        SigningPnl1 = new javax.swing.JPanel();
        SignTextRbtn = new javax.swing.JRadioButton();
        SignFileRbtn = new javax.swing.JRadioButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        SignTextTaa = new javax.swing.JTextArea();
        SignFileLbl = new javax.swing.JLabel();
        SignFilePathTfd = new javax.swing.JTextField();
        SignBrowseBtn = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane8 = new javax.swing.JScrollPane();
        SignatureTaa = new javax.swing.JTextArea();
        SignatureLbl = new javax.swing.JLabel();
        SignFileSaveLbl = new javax.swing.JLabel();
        SignFilePathSaveTfd = new javax.swing.JTextField();
        SignBtn = new javax.swing.JButton();
        SignClearBtn = new javax.swing.JButton();
        SignSaveBtn = new javax.swing.JButton();
        SignSHA256Rbtn = new javax.swing.JRadioButton();
        SignWhirlpoolRbtn = new javax.swing.JRadioButton();
        AuthentificationPnl = new javax.swing.JPanel();
        AuthentificationPnl1 = new javax.swing.JPanel();
        AuthentTextRbtn = new javax.swing.JRadioButton();
        AuthentFileRbtn = new javax.swing.JRadioButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        AuthentTextTaa = new javax.swing.JTextArea();
        AuthentFileLbl = new javax.swing.JLabel();
        AuthentFilePathTfd = new javax.swing.JTextField();
        AuthentBrowseBtn = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jScrollPane10 = new javax.swing.JScrollPane();
        AuthentResultTaa = new javax.swing.JTextArea();
        AuthentLbl = new javax.swing.JLabel();
        AuthentBtn = new javax.swing.JButton();
        AuthentTextClearBtn = new javax.swing.JButton();
        AuthentSHA256Rbtn = new javax.swing.JRadioButton();
        AuthentWhirlpoolRbtn = new javax.swing.JRadioButton();
        AuthentSignatureTfd = new javax.swing.JTextField();
        AuthentSignatureLbl = new javax.swing.JLabel();
        AuthentSignatureClearBtn = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        FileMnu = new javax.swing.JMenu();
        ExitMni = new javax.swing.JMenuItem();
        EditMnu = new javax.swing.JMenu();
        HelpMnu = new javax.swing.JMenu();
        HelpMni = new javax.swing.JMenuItem();
        Separator = new javax.swing.JPopupMenu.Separator();
        AboutMni = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setResizable(false);

        MainPnl.setBackground(new java.awt.Color(51, 51, 51));

        TabbedPne.setBackground(new java.awt.Color(30, 14, 52));

        SessionPnl.setBackground(new java.awt.Color(204, 204, 255));
        SessionPnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SessionLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        SessionLbl.setForeground(new java.awt.Color(122, 122, 142));
        SessionLbl.setText("Session de :");
        SessionPnl.add(SessionLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        UserIdentifierLbl.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        UserIdentifierLbl.setForeground(new java.awt.Color(122, 122, 142));
        UserIdentifierLbl.setText("Nom Session");
        SessionPnl.add(UserIdentifierLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, 210, -1));

        jPanel10.setBackground(new java.awt.Color(204, 204, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel10.setOpaque(false);

        jLabel15.setForeground(new java.awt.Color(122, 122, 142));
        jLabel15.setText("Clé publique : ");

        PublicKeyLbl.setForeground(new java.awt.Color(122, 122, 142));
        PublicKeyLbl.setText("Clé publique");

        jLabel17.setForeground(new java.awt.Color(122, 122, 142));
        jLabel17.setText("Clé privée : ");

        PrivateKeyLbl.setForeground(new java.awt.Color(122, 122, 142));
        PrivateKeyLbl.setText("Clé privée");

        jLabel19.setForeground(new java.awt.Color(122, 122, 142));
        jLabel19.setText("Module :");

        ModulusLbl.setForeground(new java.awt.Color(122, 122, 142));
        ModulusLbl.setText("Module");

        KeyDescriptionLbl.setForeground(new java.awt.Color(122, 122, 142));
        KeyDescriptionLbl.setText("Description : ");

        KeyDetailsBtn.setText("Détails");
        KeyDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeyDetailsBtnActionPerformed(evt);
            }
        });

        ChangeKeyBtn.setText("Choisir une Autre  Clé");
        ChangeKeyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeKeyBtnActionPerformed(evt);
            }
        });

        KeyIdentifierLbl.setForeground(new java.awt.Color(122, 122, 142));
        KeyIdentifierLbl.setText("Identifiant");

        KeySizeLbl.setForeground(new java.awt.Color(122, 122, 142));
        KeySizeLbl.setText("Taille");

        RefreshBtn.setBackground(new java.awt.Color(22, 14, 32));
        RefreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RSA/Icons/reload.png"))); // NOI18N
        RefreshBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RefreshBtnMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel17)
                    .addComponent(jLabel19)
                    .addComponent(KeyDescriptionLbl))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ModulusLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(PrivateKeyLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(PublicKeyLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(46, 46, 46))
                        .addGroup(jPanel10Layout.createSequentialGroup()
                            .addComponent(KeyDetailsBtn)
                            .addGap(54, 54, 54)
                            .addComponent(ChangeKeyBtn)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(KeyIdentifierLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(KeySizeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RefreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KeyDescriptionLbl)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(KeyIdentifierLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(KeySizeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PublicKeyLbl)
                            .addComponent(jLabel15)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(RefreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(PrivateKeyLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(ModulusLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChangeKeyBtn)
                    .addComponent(KeyDetailsBtn))
                .addContainerGap())
        );

        SessionPnl.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 290, 460, -1));

        CloseSessionBtn.setText("Fermer Session");
        CloseSessionBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CloseSessionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseSessionBtnActionPerformed(evt);
            }
        });
        SessionPnl.add(CloseSessionBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, -1, -1));

        jPanel2.setOpaque(false);

        filler1.setBackground(new java.awt.Color(6, 11, 30));
        filler1.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(122, 122, 142));
        jLabel2.setText("Info session:");

        UserName.setForeground(new java.awt.Color(122, 122, 142));
        UserName.setText("name");

        UserDOB.setForeground(new java.awt.Color(122, 122, 142));
        UserDOB.setText("dob");

        UserEmail.setForeground(new java.awt.Color(122, 122, 142));
        UserEmail.setText("email");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UserDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UserEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UserName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(290, 290, 290))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(UserName)
                .addGap(18, 18, 18)
                .addComponent(UserDOB)
                .addGap(18, 18, 18)
                .addComponent(UserEmail)
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        SessionPnl.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 290, 190));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RSA/Icons/person2.png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SessionPnl.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, -1, -1));

        ImageLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RSA/Icons/RSA_SecureApp.jpg"))); // NOI18N
        ImageLbl.setText("  ");
        ImageLbl.setOpaque(true);
        SessionPnl.add(ImageLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 960, 470));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 945, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 471, Short.MAX_VALUE)
        );

        SessionPnl.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        TabbedPne.addTab("Info Session", SessionPnl);

        CiphTextRbtn.setText("Texte");
        CiphTextRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiphTextRbtnActionPerformed(evt);
            }
        });

        CiphFileRbtn.setText("Fichier");
        CiphFileRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiphFileRbtnActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(925, 100));

        CiphTextTaa.setColumns(20);
        CiphTextTaa.setLineWrap(true);
        CiphTextTaa.setRows(5);
        CiphTextTaa.setText("Texte...");
        CiphTextTaa.setMinimumSize(new java.awt.Dimension(104, 22));
        CiphTextTaa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CiphTextTaaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(CiphTextTaa);

        CiphFileLbl.setText("Fichier : ");

        CiphFilePathTfd.setText("L'url du fichier...");
        CiphFilePathTfd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CiphFilePathTfdMouseReleased(evt);
            }
        });

        CiphBrowseBtn.setText("Browse");
        CiphBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiphBrowseBtnActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(925, 100));

        CipheredTaa.setEditable(false);
        CipheredTaa.setColumns(20);
        CipheredTaa.setLineWrap(true);
        CipheredTaa.setRows(5);
        CipheredTaa.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CipheredTaa.setMinimumSize(new java.awt.Dimension(104, 22));
        CipheredTaa.setSelectionEnd(8);
        CipheredTaa.setSelectionStart(8);
        jScrollPane2.setViewportView(CipheredTaa);

        CipheredLbl.setText("Chiffré :");

        CiphFileSaveLbl.setText("Fichier : ");

        CiphFilePathSaveTfd.setText("L'url de sauvegarde...");
        CiphFilePathSaveTfd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiphFilePathSaveTfdActionPerformed(evt);
            }
        });

        CipherBtn.setText("Chiffrer");
        CipherBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CipherBtnActionPerformed(evt);
            }
        });

        CiphClearBtn.setText("Effacer");
        CiphClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiphClearBtnActionPerformed(evt);
            }
        });

        CiphSaveBtn.setText("Save");
        CiphSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiphSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CipheringPnlLayout = new javax.swing.GroupLayout(CipheringPnl);
        CipheringPnl.setLayout(CipheringPnlLayout);
        CipheringPnlLayout.setHorizontalGroup(
            CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(CipheringPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CipheringPnlLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(CipheringPnlLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(CipheringPnlLayout.createSequentialGroup()
                        .addComponent(CiphFileLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CipheringPnlLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(CiphClearBtn))
                            .addComponent(CiphFilePathTfd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CiphBrowseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CipherBtn))
                        .addGap(70, 70, 70))))
            .addGroup(CipheringPnlLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(CipheredLbl)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(CipheringPnlLayout.createSequentialGroup()
                .addGroup(CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CipheringPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CiphFileSaveLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CiphFilePathSaveTfd, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CiphSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CipheringPnlLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(CiphTextRbtn)
                        .addGap(119, 119, 119)
                        .addComponent(CiphFileRbtn)))
                .addContainerGap(463, Short.MAX_VALUE))
        );
        CipheringPnlLayout.setVerticalGroup(
            CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CipheringPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CiphTextRbtn)
                    .addComponent(CiphFileRbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CiphFileLbl)
                    .addComponent(CiphFilePathTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CiphBrowseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CiphClearBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CipherBtn))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CipheredLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(CipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CiphFileSaveLbl)
                    .addComponent(CiphFilePathSaveTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CiphSaveBtn))
                .addContainerGap())
        );

        TabbedPne.addTab("Chiffrement", CipheringPnl);

        DeciphTextRbtn.setText("Texte");
        DeciphTextRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeciphTextRbtnActionPerformed(evt);
            }
        });

        DeciphFileRbtn.setText("Fichier");
        DeciphFileRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeciphFileRbtnActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        DeciphTextTaa.setColumns(20);
        DeciphTextTaa.setLineWrap(true);
        DeciphTextTaa.setRows(5);
        DeciphTextTaa.setText("Le chiffré...");
        DeciphTextTaa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                DeciphTextTaaMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(DeciphTextTaa);

        DeciphFileLbl.setText("Fichier : ");

        DeciphFilePathTfd.setText("L'url du fichier...");
        DeciphFilePathTfd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                DeciphFilePathTfdMouseReleased(evt);
            }
        });
        DeciphFilePathTfd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeciphFilePathTfdActionPerformed(evt);
            }
        });

        DeciphBrowseBtn.setText("Browse");
        DeciphBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeciphBrowseBtnActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        DecipheredTaa.setEditable(false);
        DecipheredTaa.setColumns(20);
        DecipheredTaa.setLineWrap(true);
        DecipheredTaa.setRows(5);
        jScrollPane4.setViewportView(DecipheredTaa);

        DecipheredLbl.setText("Déchiffré :");

        DeciphFileSaveLbl.setText("Fichier : ");

        DeciphFilePathSaveTfd.setText("L'url de sauvegarde...");

        DecipherBtn.setText("Déchiffrer");
        DecipherBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecipherBtnActionPerformed(evt);
            }
        });

        DeciphClearBtn.setText("Effacer");
        DeciphClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeciphClearBtnActionPerformed(evt);
            }
        });

        DeciphSaveBtn.setText("Save");
        DeciphSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeciphSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DecipheringPnl1Layout = new javax.swing.GroupLayout(DecipheringPnl1);
        DecipheringPnl1.setLayout(DecipheringPnl1Layout);
        DecipheringPnl1Layout.setHorizontalGroup(
            DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(DecipheredLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                .addGroup(DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(DeciphFileSaveLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeciphFilePathSaveTfd, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DeciphSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(DeciphTextRbtn)
                        .addGap(119, 119, 119)
                        .addComponent(DeciphFileRbtn)))
                .addContainerGap(455, Short.MAX_VALUE))
            .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addContainerGap())
                    .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DecipheringPnl1Layout.createSequentialGroup()
                        .addGroup(DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(DeciphClearBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DecipherBtn))
                            .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                                .addComponent(DeciphFileLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeciphFilePathTfd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DeciphBrowseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(70, 70, 70))))
        );
        DecipheringPnl1Layout.setVerticalGroup(
            DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DecipheringPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeciphTextRbtn)
                    .addComponent(DeciphFileRbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeciphFileLbl)
                    .addComponent(DeciphFilePathTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeciphBrowseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DeciphClearBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DecipherBtn))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DecipheredLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(DecipheringPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeciphFileSaveLbl)
                    .addComponent(DeciphFilePathSaveTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeciphSaveBtn))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout DecipheringPnlLayout = new javax.swing.GroupLayout(DecipheringPnl);
        DecipheringPnl.setLayout(DecipheringPnlLayout);
        DecipheringPnlLayout.setHorizontalGroup(
            DecipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 962, Short.MAX_VALUE)
            .addGroup(DecipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(DecipheringPnl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DecipheringPnlLayout.setVerticalGroup(
            DecipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
            .addGroup(DecipheringPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(DecipheringPnl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPne.addTab("Déchiffrement", DecipheringPnl);

        HashTextRbtn.setText("Texte");
        HashTextRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HashTextRbtnActionPerformed(evt);
            }
        });

        HashFileRbtn.setText("Fichier");
        HashFileRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HashFileRbtnActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        HashTextTaa.setColumns(20);
        HashTextTaa.setLineWrap(true);
        HashTextTaa.setRows(5);
        HashTextTaa.setText("Texte...");
        HashTextTaa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                HashTextTaaMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(HashTextTaa);

        HashFileLbl.setText("Fichier : ");

        HashFilePathTfd.setText("L'url du fichier...");
        HashFilePathTfd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                HashFilePathTfdMouseReleased(evt);
            }
        });

        HashBrowseBtn.setText("Browse");
        HashBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HashBrowseBtnActionPerformed(evt);
            }
        });

        jScrollPane6.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        HashCodeTaa.setEditable(false);
        HashCodeTaa.setColumns(20);
        HashCodeTaa.setLineWrap(true);
        HashCodeTaa.setRows(5);
        jScrollPane6.setViewportView(HashCodeTaa);

        HashCodeLbl.setText("Empreinte :");

        HashFileSaveLbl.setText("Fichier : ");

        HashFilePathSaveTfd.setText("L'url de sauvegarde...");

        HashBtn.setText("Hacher");
        HashBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HashBtnActionPerformed(evt);
            }
        });

        HashClearBtn.setText("Effacer");
        HashClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HashClearBtnActionPerformed(evt);
            }
        });

        HashSaveBtn.setText("Save");
        HashSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HashSaveBtnActionPerformed(evt);
            }
        });

        HashSHA256Rbtn.setText("SHA256");
        HashSHA256Rbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HashSHA256RbtnActionPerformed(evt);
            }
        });

        HashWhirlpoolRbtn.setText("Whirlpool");
        HashWhirlpoolRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HashWhirlpoolRbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HashingPnl1Layout = new javax.swing.GroupLayout(HashingPnl1);
        HashingPnl1.setLayout(HashingPnl1Layout);
        HashingPnl1Layout.setHorizontalGroup(
            HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(HashingPnl1Layout.createSequentialGroup()
                .addGroup(HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HashingPnl1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(HashTextRbtn)
                        .addGap(119, 119, 119)
                        .addComponent(HashFileRbtn))
                    .addGroup(HashingPnl1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(HashFileSaveLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HashFilePathSaveTfd, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(HashSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(463, Short.MAX_VALUE))
            .addGroup(HashingPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HashingPnl1Layout.createSequentialGroup()
                        .addComponent(jScrollPane6)
                        .addContainerGap())
                    .addGroup(HashingPnl1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addContainerGap())
                    .addGroup(HashingPnl1Layout.createSequentialGroup()
                        .addComponent(HashFileLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(HashingPnl1Layout.createSequentialGroup()
                                .addComponent(HashSHA256Rbtn)
                                .addGap(18, 18, 18)
                                .addComponent(HashWhirlpoolRbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(HashClearBtn))
                            .addComponent(HashFilePathTfd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(HashBrowseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HashBtn))
                        .addGap(70, 70, 70))
                    .addGroup(HashingPnl1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(HashCodeLbl)
                        .addGap(826, 857, Short.MAX_VALUE))))
        );
        HashingPnl1Layout.setVerticalGroup(
            HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HashingPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HashTextRbtn)
                    .addComponent(HashFileRbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HashFileLbl)
                    .addComponent(HashFilePathTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HashBrowseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(HashClearBtn)
                        .addComponent(HashSHA256Rbtn)
                        .addComponent(HashWhirlpoolRbtn))
                    .addComponent(HashBtn))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(HashCodeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(HashingPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HashFileSaveLbl)
                    .addComponent(HashFilePathSaveTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HashSaveBtn))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout HashingPnlLayout = new javax.swing.GroupLayout(HashingPnl);
        HashingPnl.setLayout(HashingPnlLayout);
        HashingPnlLayout.setHorizontalGroup(
            HashingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 962, Short.MAX_VALUE)
            .addGroup(HashingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(HashingPnl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        HashingPnlLayout.setVerticalGroup(
            HashingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
            .addGroup(HashingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(HashingPnl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPne.addTab("Hachage", HashingPnl);

        SignTextRbtn.setText("Texte");
        SignTextRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignTextRbtnActionPerformed(evt);
            }
        });

        SignFileRbtn.setText("Fichier");
        SignFileRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignFileRbtnActionPerformed(evt);
            }
        });

        jScrollPane7.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        SignTextTaa.setColumns(20);
        SignTextTaa.setLineWrap(true);
        SignTextTaa.setRows(5);
        SignTextTaa.setText("Texte...");
        SignTextTaa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SignTextTaaMouseReleased(evt);
            }
        });
        jScrollPane7.setViewportView(SignTextTaa);

        SignFileLbl.setText("Fichier : ");

        SignFilePathTfd.setText("L'url du fichier...");
        SignFilePathTfd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SignFilePathTfdMouseReleased(evt);
            }
        });

        SignBrowseBtn.setText("Browse");
        SignBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignBrowseBtnActionPerformed(evt);
            }
        });

        jScrollPane8.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        SignatureTaa.setEditable(false);
        SignatureTaa.setColumns(20);
        SignatureTaa.setLineWrap(true);
        SignatureTaa.setRows(5);
        jScrollPane8.setViewportView(SignatureTaa);

        SignatureLbl.setText("Signature : ");

        SignFileSaveLbl.setText("Fichier : ");

        SignFilePathSaveTfd.setText("L'url de sauvegarde...");

        SignBtn.setText("Signer");
        SignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignBtnActionPerformed(evt);
            }
        });

        SignClearBtn.setText("Effacer");
        SignClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignClearBtnActionPerformed(evt);
            }
        });

        SignSaveBtn.setText("Save");
        SignSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignSaveBtnActionPerformed(evt);
            }
        });

        SignSHA256Rbtn.setText("SHA256");
        SignSHA256Rbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignSHA256RbtnActionPerformed(evt);
            }
        });

        SignWhirlpoolRbtn.setText("Whirlpool");
        SignWhirlpoolRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignWhirlpoolRbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SigningPnl1Layout = new javax.swing.GroupLayout(SigningPnl1);
        SigningPnl1.setLayout(SigningPnl1Layout);
        SigningPnl1Layout.setHorizontalGroup(
            SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator4)
            .addGroup(SigningPnl1Layout.createSequentialGroup()
                .addGroup(SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SigningPnl1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(SignTextRbtn)
                        .addGap(119, 119, 119)
                        .addComponent(SignFileRbtn))
                    .addGroup(SigningPnl1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                            .addGroup(SigningPnl1Layout.createSequentialGroup()
                                .addComponent(SignFileSaveLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SignFilePathSaveTfd, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SignSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(SigningPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SigningPnl1Layout.createSequentialGroup()
                        .addComponent(jScrollPane7)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SigningPnl1Layout.createSequentialGroup()
                        .addComponent(SignFileLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(SigningPnl1Layout.createSequentialGroup()
                                .addComponent(SignFilePathTfd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SignBrowseBtn))
                            .addGroup(SigningPnl1Layout.createSequentialGroup()
                                .addComponent(SignSHA256Rbtn)
                                .addGap(18, 18, 18)
                                .addComponent(SignWhirlpoolRbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SignClearBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SignBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(70, 70, 70))))
            .addGroup(SigningPnl1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(SignatureLbl)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        SigningPnl1Layout.setVerticalGroup(
            SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SigningPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SignTextRbtn)
                    .addComponent(SignFileRbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SignFileLbl)
                    .addComponent(SignFilePathTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SignBrowseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SignClearBtn)
                        .addComponent(SignSHA256Rbtn)
                        .addComponent(SignWhirlpoolRbtn))
                    .addComponent(SignBtn))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SignatureLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(SigningPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SignFileSaveLbl)
                    .addComponent(SignFilePathSaveTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SignSaveBtn))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SigningPnlLayout = new javax.swing.GroupLayout(SigningPnl);
        SigningPnl.setLayout(SigningPnlLayout);
        SigningPnlLayout.setHorizontalGroup(
            SigningPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 962, Short.MAX_VALUE)
            .addGroup(SigningPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(SigningPnl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SigningPnlLayout.setVerticalGroup(
            SigningPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
            .addGroup(SigningPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(SigningPnl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPne.addTab("Signature", SigningPnl);

        AuthentTextRbtn.setText("Texte");
        AuthentTextRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthentTextRbtnActionPerformed(evt);
            }
        });

        AuthentFileRbtn.setText("Fichier");
        AuthentFileRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthentFileRbtnActionPerformed(evt);
            }
        });

        jScrollPane9.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        AuthentTextTaa.setColumns(20);
        AuthentTextTaa.setLineWrap(true);
        AuthentTextTaa.setRows(5);
        AuthentTextTaa.setText("Texte...");
        AuthentTextTaa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AuthentTextTaaMouseReleased(evt);
            }
        });
        jScrollPane9.setViewportView(AuthentTextTaa);

        AuthentFileLbl.setText("Fichier : ");

        AuthentFilePathTfd.setText("L'url du fichier...");
        AuthentFilePathTfd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AuthentFilePathTfdMouseReleased(evt);
            }
        });

        AuthentBrowseBtn.setText("Browse");
        AuthentBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthentBrowseBtnActionPerformed(evt);
            }
        });

        jScrollPane10.setViewportBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        AuthentResultTaa.setEditable(false);
        AuthentResultTaa.setColumns(20);
        AuthentResultTaa.setLineWrap(true);
        AuthentResultTaa.setRows(5);
        jScrollPane10.setViewportView(AuthentResultTaa);

        AuthentLbl.setText("Résultat : ");

        AuthentBtn.setText("Vérifier");
        AuthentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthentBtnActionPerformed(evt);
            }
        });

        AuthentTextClearBtn.setText("Effacer");
        AuthentTextClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthentTextClearBtnActionPerformed(evt);
            }
        });

        AuthentSHA256Rbtn.setText("SHA256");
        AuthentSHA256Rbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthentSHA256RbtnActionPerformed(evt);
            }
        });

        AuthentWhirlpoolRbtn.setText("Whirlpool");
        AuthentWhirlpoolRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthentWhirlpoolRbtnActionPerformed(evt);
            }
        });

        AuthentSignatureTfd.setText("La Signature...");
        AuthentSignatureTfd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AuthentSignatureTfdMouseReleased(evt);
            }
        });

        AuthentSignatureLbl.setText("La Signature :");

        AuthentSignatureClearBtn.setText("Effacer");
        AuthentSignatureClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthentSignatureClearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AuthentificationPnl1Layout = new javax.swing.GroupLayout(AuthentificationPnl1);
        AuthentificationPnl1.setLayout(AuthentificationPnl1Layout);
        AuthentificationPnl1Layout.setHorizontalGroup(
            AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator5)
            .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(AuthentTextRbtn)
                        .addGap(119, 119, 119)
                        .addComponent(AuthentFileRbtn))
                    .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                        .addComponent(jScrollPane9)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthentificationPnl1Layout.createSequentialGroup()
                        .addComponent(AuthentFileLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                                .addComponent(AuthentFilePathTfd, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AuthentBrowseBtn))
                            .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                                .addComponent(AuthentTextClearBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AuthentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AuthentificationPnl1Layout.createSequentialGroup()
                                .addComponent(AuthentSHA256Rbtn)
                                .addGap(18, 18, 18)
                                .addComponent(AuthentWhirlpoolRbtn)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(70, 70, 70))))
            .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(AuthentLbl)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AuthentificationPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AuthentSignatureClearBtn)
                    .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                        .addComponent(AuthentSignatureLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AuthentSignatureTfd, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70))
        );
        AuthentificationPnl1Layout.setVerticalGroup(
            AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AuthentificationPnl1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AuthentTextRbtn)
                    .addComponent(AuthentFileRbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AuthentFileLbl)
                    .addComponent(AuthentFilePathTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AuthentBrowseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AuthentTextClearBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AuthentBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AuthentSignatureLbl)
                    .addComponent(AuthentSignatureTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AuthentificationPnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AuthentSHA256Rbtn)
                    .addComponent(AuthentWhirlpoolRbtn)
                    .addComponent(AuthentSignatureClearBtn))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AuthentLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout AuthentificationPnlLayout = new javax.swing.GroupLayout(AuthentificationPnl);
        AuthentificationPnl.setLayout(AuthentificationPnlLayout);
        AuthentificationPnlLayout.setHorizontalGroup(
            AuthentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 962, Short.MAX_VALUE)
            .addGroup(AuthentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(AuthentificationPnl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AuthentificationPnlLayout.setVerticalGroup(
            AuthentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
            .addGroup(AuthentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(AuthentificationPnl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPne.addTab("Authentifier", AuthentificationPnl);

        javax.swing.GroupLayout MainPnlLayout = new javax.swing.GroupLayout(MainPnl);
        MainPnl.setLayout(MainPnlLayout);
        MainPnlLayout.setHorizontalGroup(
            MainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPnlLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(TabbedPne)
                .addGap(0, 0, 0))
        );
        MainPnlLayout.setVerticalGroup(
            MainPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPne, javax.swing.GroupLayout.PREFERRED_SIZE, 490, Short.MAX_VALUE)
        );

        FileMnu.setText("Fichier");

        ExitMni.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        ExitMni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RSA/Icons/close.png"))); // NOI18N
        ExitMni.setText("Quitter");
        ExitMni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMniActionPerformed(evt);
            }
        });
        FileMnu.add(ExitMni);

        MenuBar.add(FileMnu);

        EditMnu.setText("Édition");
        MenuBar.add(EditMnu);

        HelpMnu.setText("Aide");

        HelpMni.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        HelpMni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RSA/Icons/help32.png"))); // NOI18N
        HelpMni.setText("L'aide");
        HelpMni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpMniActionPerformed(evt);
            }
        });
        HelpMnu.add(HelpMni);
        HelpMnu.add(Separator);

        AboutMni.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        AboutMni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RSA/Icons/about32.png"))); // NOI18N
        AboutMni.setText("À propos de RSA secure app");
        AboutMni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMniActionPerformed(evt);
            }
        });
        HelpMnu.add(AboutMni);

        MenuBar.add(HelpMnu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void DeciphSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeciphSaveBtnActionPerformed
        // TODO add your handling code here:
        boolean writable = false;
        OverWrite oW = new OverWrite(this, true);
        do{
            DeciphFilePathSaveTfd.setText(null);
            FileChooser dialog = new FileChooser(this);
            url = dialog.saveFile();


            if(!(url == null)){

                //<editor-fold defaultstate="collapsed" desc="not necessary; left for repairs">
    //            //getting the file name from user
    //            SavaName name = new SavaName(this, true);
    //            name.addWindowListener(new java.awt.event.WindowAdapter() {
    //                        @Override
    //                        public void windowClosing(java.awt.event.WindowEvent e) {
    //                        }
    //                    });
    //            name.setVisible(true);

    //            //completing the fil path
    //            url = url.substring(0, url.length()-1)+name.getSaveName()+name.getExtension()+"\"";
    //</editor-fold>



                File f = new File(url);

                try {

                    if(f.exists()){
                        
                        DeciphFilePathSaveTfd.setText(url);
                        
                        oW.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent e) {
                            }
                        });
                        oW.setVisible(true);

                        if(oW.getOverWrite()){
                            f.delete();
                            f.createNewFile();
                            writable = true;
                        }
                    }
                    else{
                        DeciphFilePathSaveTfd.setText(url);
                        
                        if(!(f.getParentFile().exists())){
                            f.getParentFile().mkdirs();
                        }
                        f.createNewFile();
                        writable = true;
                    }

                } catch (IOException ex) {
                    System.out.println(ex.toString());
                }
            }
        }while(!(oW.getOverWrite()||writable));
//        String text = "Votre cryptogramme:\n" + CipheredTaa.getText();
//        writeText(text,url);
        if(writable){
            writeText(DecipheredTaa.getText(),url);
            Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/checkin32.png");
                    dialog.setMessage("Fichier sauvegargé!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
        }

    }//GEN-LAST:event_DeciphSaveBtnActionPerformed

    private void HashSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HashSaveBtnActionPerformed
        // TODO add your handling code here:
        boolean writable = false;
        OverWrite oW = new OverWrite(this, true);
        do{
            HashFilePathSaveTfd.setText(null);
            FileChooser dialog = new FileChooser(this);
            url = dialog.saveFile();


            if(!(url == null)){

                //<editor-fold defaultstate="collapsed" desc="not necessary; left for repairs">
    //            //getting the file name from user
    //            SavaName name = new SavaName(this, true);
    //            name.addWindowListener(new java.awt.event.WindowAdapter() {
    //                        @Override
    //                        public void windowClosing(java.awt.event.WindowEvent e) {
    //                        }
    //                    });
    //            name.setVisible(true);

    //            //completing the fil path
    //            url = url.substring(0, url.length()-1)+name.getSaveName()+name.getExtension()+"\"";
    //</editor-fold>



                File f = new File(url);

                try {

                    if(f.exists()){
                        
                        HashFilePathSaveTfd.setText(url);
                        
                        oW.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent e) {
                            }
                        });
                        oW.setVisible(true);

                        if(oW.getOverWrite()){
                            f.delete();
                            f.createNewFile();
                            writable = true;
                        }
                    }
                    else{
                        HashFilePathSaveTfd.setText(url);
                        
                        if(!(f.getParentFile().exists())){
                            f.getParentFile().mkdirs();
                        }
                        f.createNewFile();
                        writable = true;
                    }

                } catch (IOException ex) {
                    System.out.println(ex.toString());
                }
            }
        }while(!(oW.getOverWrite()||writable));
//        String text = "Votre cryptogramme:\n" + CipheredTaa.getText();
//        writeText(text,url);
        if(writable){
            writeText(HashCodeTaa.getText(),url);
            Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/checkin32.png");
                    dialog.setMessage("Fichier sauvegargé!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
        }

//        hashEdit = true;
    }//GEN-LAST:event_HashSaveBtnActionPerformed

    private void SignSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignSaveBtnActionPerformed
        // TODO add your handling code here:
        boolean writable = false;
        OverWrite oW = new OverWrite(this, true);
        do{
            SignFilePathSaveTfd.setText(null);
            FileChooser dialog = new FileChooser(this);
            url = dialog.saveFile();


            if(!(url == null)){

                //<editor-fold defaultstate="collapsed" desc="not necessary; left for repairs">
    //            //getting the file name from user
    //            SavaName name = new SavaName(this, true);
    //            name.addWindowListener(new java.awt.event.WindowAdapter() {
    //                        @Override
    //                        public void windowClosing(java.awt.event.WindowEvent e) {
    //                        }
    //                    });
    //            name.setVisible(true);

    //            //completing the fil path
    //            url = url.substring(0, url.length()-1)+name.getSaveName()+name.getExtension()+"\"";
    //</editor-fold>



                File f = new File(url);

                try {

                    if(f.exists()){
                        
                        SignFilePathSaveTfd.setText(url);
                        
                        oW.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent e) {
                            }
                        });
                        oW.setVisible(true);

                        if(oW.getOverWrite()){
                            f.delete();
                            f.createNewFile();
                            writable = true;
                        }
                    }
                    else{
                        SignFilePathSaveTfd.setText(url);
                        
                        if(!(f.getParentFile().exists())){
                            f.getParentFile().mkdirs();
                        }
                        f.createNewFile();
                        writable = true;
                    }

                } catch (IOException ex) {
                    System.out.println(ex.toString());
                }
            }
        }while(!(oW.getOverWrite()||writable));
//        String text = "Votre cryptogramme:\n" + CipheredTaa.getText();
//        writeText(text,url);
        if(writable){
            writeText(SignatureTaa.getText(),url);
            Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/checkin32.png");
                    dialog.setMessage("Fichier sauvegargé!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
        }

//        signEdit = true;
    }//GEN-LAST:event_SignSaveBtnActionPerformed

    private void DeciphTextRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeciphTextRbtnActionPerformed
        // TODO add your handling code here:
        DeciphTextTaa.setEnabled(true);
        DeciphFilePathTfd.setEnabled(false);
        DeciphBrowseBtn.setEnabled(false);
        deciphText = true;
        deciphFile = false;
    }//GEN-LAST:event_DeciphTextRbtnActionPerformed

    private void DeciphFileRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeciphFileRbtnActionPerformed
        // TODO add your handling code here:
        DeciphTextTaa.setEnabled(false);
        DeciphFilePathTfd.setEnabled(true);
        DeciphBrowseBtn.setEnabled(true);
        deciphText = false;
        deciphFile = true;
    }//GEN-LAST:event_DeciphFileRbtnActionPerformed

    private void DeciphBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeciphBrowseBtnActionPerformed
        // TODO add your handling code here:
        FileChooser dialog = new FileChooser(this);
        url = dialog.openFile();
        if(!(url == null)){
            DeciphFilePathTfd.setText(url);
            DeciphTextTaa.setText(readText(url));
            deciphPathEdit = true;
        }
    }//GEN-LAST:event_DeciphBrowseBtnActionPerformed

    private void DeciphClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeciphClearBtnActionPerformed
        // TODO add your handling code here:
        if(deciphText){
            DeciphTextTaa.setText("");
        }
        if(deciphFile){
            DeciphFilePathTfd.setText("");
        }
    }//GEN-LAST:event_DeciphClearBtnActionPerformed

    private void DecipherBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecipherBtnActionPerformed
        // TODO add your handling code here:
        
        if(deciphText){
            if("".equals(DeciphTextTaa.getText())){
                DecipheredTaa.setText(null);
            }
            else{
                writeText(DeciphTextTaa.getText(), "Data/Users/User_id"+user.getUserId()+"/Plain_text/Deciph_text.txt");

                String plainText = deciphering("Data/Users/User_id"+user.getUserId()+"/Plain_text/Deciph_text.txt",inUseKey);
                DecipheredTaa.setText(plainText);
                writeText(plainText, "Data/Users/User_id"+user.getUserId()+"/Result/Deciphered.txt");

                deciphEdit = true;
            }
        }
        

        if(deciphFile){
            if(url == null){
                DecipheredTaa.setText("");
                Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/failed.png");
                    dialog.setMessage("Veuillez Specifier le Chemin d'accès au fichier!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
            }
            else{
                url = DeciphFilePathTfd.getText();
                writeText(readText(url),"Data/Users/User_id"+user.getUserId()+"/Plain_text/Deciph_text.txt");

                String plainText = deciphering("Data/Users/User_id"+user.getUserId()+"/Plain_text/Deciph_text.txt",inUseKey);
                DecipheredTaa.setText(plainText);
                writeText(plainText,"Data/Users/User_id"+user.getUserId()+"/Result/Deciphered.txt");

                deciphEdit = true;
            }
        }
        
    }//GEN-LAST:event_DecipherBtnActionPerformed

    private void HashBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HashBrowseBtnActionPerformed
        // TODO add your handling code here:
        FileChooser dialog = new FileChooser(this);
        url = dialog.openFile();
        if(!(url == null)){
            HashFilePathTfd.setText(url);
            HashTextTaa.setText(readText(url));
            hashPathEdit = true;
        }
    }//GEN-LAST:event_HashBrowseBtnActionPerformed

    private void HashClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HashClearBtnActionPerformed
        // TODO add your handling code here:
        if(hashText){
            HashTextTaa.setText("");
        }
        if(hashFile){
            HashFilePathTfd.setText("");
        }
    }//GEN-LAST:event_HashClearBtnActionPerformed

    private void HashBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HashBtnActionPerformed
        // TODO add your handling code here:
        if(hashText){
//            if("".equals(HashTextTaa.getText())){
//                HashCodeTaa.setText(null);
//            }
//            else{
                writeText(HashTextTaa.getText(), "Data/Users/User_id"+user.getUserId()+"/Plain_text/Hash_text.txt");
                
                String hashCode = "error with switch statement";
                        
                switch(hashMethod_Hashing){
                    case 1 :  hashCode = hashing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Hash_text.txt", 1);
                        break;
                    case 2 :  hashCode = hashing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Hash_text.txt", 2);
                        break;
                }
                
                HashCodeTaa.setText(hashCode);
                writeText(hashCode, "Data/Users/User_id"+user.getUserId()+"/Result/HashCode.txt");

                hashEdit = true;
//            }
        }
        

        if(hashFile){
            if(url == null){
                HashCodeTaa.setText("");
                Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/failed.png");
                    dialog.setMessage("Veuillez Specifier le Chemin d'accès au fichier!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
            }
            else{
                url = HashFilePathTfd.getText();
                writeText(readText(url),"Data/Users/User_id"+user.getUserId()+"/Plain_text/Hash_text.txt");
                
                String hashCode = "error with switch statement";
                
                switch(hashMethod_Hashing){
                    case 1 :  hashCode = hashing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Hash_text.txt", 1);
                        break;
                    case 2 :  hashCode = hashing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Hash_text.txt", 2);
                        break;
                }
                
                HashCodeTaa.setText(hashCode);
                writeText(hashCode,"Data/Users/User_id"+user.getUserId()+"/Result/HashCode.txt");

                hashEdit = true;
            }
        }
        
    }//GEN-LAST:event_HashBtnActionPerformed

    private void HashTextRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HashTextRbtnActionPerformed
        // TODO add your handling code here:
        HashTextTaa.setEnabled(true);
        HashFilePathTfd.setEnabled(false);
        HashBrowseBtn.setEnabled(false);
        hashText = true;
        hashFile = false;
    }//GEN-LAST:event_HashTextRbtnActionPerformed

    private void HashFileRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HashFileRbtnActionPerformed
        // TODO add your handling code here:
        HashTextTaa.setEnabled(false);
        HashFilePathTfd.setEnabled(true);
        HashBrowseBtn.setEnabled(true);
        hashText = false;
        hashFile = true;
    }//GEN-LAST:event_HashFileRbtnActionPerformed

    private void SignTextRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignTextRbtnActionPerformed
        // TODO add your handling code here:
        SignTextTaa.setEnabled(true);
        SignFilePathTfd.setEnabled(false);
        SignBrowseBtn.setEnabled(false);
        hashText = true;
        hashFile = false;
    }//GEN-LAST:event_SignTextRbtnActionPerformed

    private void SignClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignClearBtnActionPerformed
        // TODO add your handling code here:
        if(signText){
            SignTextTaa.setText("");
        }
        if(signFile){
            SignFilePathTfd.setText("");
        }
    }//GEN-LAST:event_SignClearBtnActionPerformed

    private void SignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignBtnActionPerformed
        // TODO add your handling code here:
        if(signText){
//            if("".equals(SignTextTaa.getText())){
//                SignatureTaa.setText(null);
//            }
//            else{
                writeText(SignTextTaa.getText(), "Data/Users/User_id"+user.getUserId()+"/Plain_text/Sign_text.txt");
                
                AuthentTextTaa.setText(SignTextTaa.getText());

                
                String signature = "error with switch statement";
                
                switch(hashMethod_Signing){
                    case 1 :  signature = signing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Sign_text.txt", inUseKey, 1);
                        break;
                    case 2 :  signature = signing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Sign_text.txt", inUseKey, 2);
                        break;
                }
                
                SignatureTaa.setText(signature);
                
                AuthentSignatureTfd.setText(SignatureTaa.getText());
                
                writeText(signature, "Data/Users/User_id"+user.getUserId()+"/Result/Signature.txt");

                signEdit = true;
//            }
        }
        

        if(signFile){
            if(url == null){
                SignatureTaa.setText("");
                Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/failed.png");
                    dialog.setMessage("Veuillez Specifier le Chemin d'accès au fichier!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
            }
            else{
                url = SignFilePathTfd.getText();
                writeText(readText(url),"Data/Users/User_id"+user.getUserId()+"/Plain_text/Sign_text.txt");
                
                String signature = "error with switch statement";
                
                switch(hashMethod_Signing){
                    case 1 :  signature = signing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Sign_text.txt", inUseKey, 1);
                        break;
                    case 2 :  signature = signing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Sign_text.txt", inUseKey, 2);
                        break;
                }
                
                SignatureTaa.setText(signature);
                writeText(signature,"Data/Users/User_id"+user.getUserId()+"/Result/Signature.txt");

                signEdit = true;
            }
        }
        
    }//GEN-LAST:event_SignBtnActionPerformed

    private void SignBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignBrowseBtnActionPerformed
        // TODO add your handling code here:
        FileChooser dialog = new FileChooser(this);
        url = dialog.openFile();
        if(!(url == null)){
            SignFilePathTfd.setText(url);
            SignTextTaa.setText(readText(url));
            signPathEdit = true;
        }
    }//GEN-LAST:event_SignBrowseBtnActionPerformed

    private void SignFileRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignFileRbtnActionPerformed
        // TODO add your handling code here:
        SignTextTaa.setEnabled(false);
        SignFilePathTfd.setEnabled(true);
        SignBrowseBtn.setEnabled(true);
        signText = false;
        signFile = true;
    }//GEN-LAST:event_SignFileRbtnActionPerformed

    private void KeyDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeyDetailsBtnActionPerformed
        // TODO add your handling code here:
        KeyDetails dialog = new KeyDetails(this, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
        
        dialog.setListInfo(inUseKey.getListInfo());
        dialog.displayDetails();
        dialog.setVisible(true);
        
        setProperties();   
        displayInUseKey();
    }//GEN-LAST:event_KeyDetailsBtnActionPerformed

    private void CloseSessionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseSessionBtnActionPerformed
        // TODO add your handling code here:
        LogOn dialog = new LogOn(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                
                KeyIdentifierLbl.setText("-");
                KeySizeLbl.setText("-");
                PublicKeyLbl.setText("-");
                PrivateKeyLbl.setText("-");
                ModulusLbl.setText("-");
                
                dialog.setVisible(true);
                
                initAll();
                
                user = new CurrentUser();
                displayUserInfo();
                
                setProperties();
                displayInUseKey();
    }//GEN-LAST:event_CloseSessionBtnActionPerformed

    private void ChangeKeyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeKeyBtnActionPerformed
        // TODO add your handling code here:
        KeyManagement dialog = new KeyManagement(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                
                dialog.setVisible(true);
                
                setProperties();
                displayInUseKey();
    }//GEN-LAST:event_ChangeKeyBtnActionPerformed

    private void RefreshBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RefreshBtnMouseReleased
        // TODO add your handling code here:
        setInUseKey(extractKey());
        setKeySize(Integer.parseInt(inUseKey.getListInfo()[1]));
        setPublicKey(new BigInteger(inUseKey.getListInfo()[2]));
        setPrivateKey(new BigInteger(inUseKey.getListInfo()[3]));
        setModulus(new BigInteger(inUseKey.getListInfo()[4]));
        
        
        displayInUseKey();
    }//GEN-LAST:event_RefreshBtnMouseReleased

    private void DeciphTextTaaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeciphTextTaaMouseReleased
        // TODO add your handling code here:
        if(deciphText){
            if(!deciphEdit){
                DeciphTextTaa.setText("");
                deciphEdit = true;
            }

            if(deciphText){
                DeciphTextTaa.setForeground(Color.BLACK);
            }
        }
    }//GEN-LAST:event_DeciphTextTaaMouseReleased

    private void HashTextTaaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HashTextTaaMouseReleased
        // TODO add your handling code here:
        if(hashText){
             if(!hashEdit){
                HashTextTaa.setText("");
                hashEdit = true;
            }

            if(hashText){
                HashTextTaa.setForeground(Color.BLACK);
            }
        }
    }//GEN-LAST:event_HashTextTaaMouseReleased

    private void SignTextTaaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SignTextTaaMouseReleased
        // TODO add your handling code here:
        if(signText){
            if(!signEdit){
                SignTextTaa.setText("");
                signEdit = true;
            }

            if(signText){
                SignTextTaa.setForeground(Color.BLACK);
            }
        }
    }//GEN-LAST:event_SignTextTaaMouseReleased

    private void DeciphFilePathTfdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeciphFilePathTfdMouseReleased
        // TODO add your handling code here:
        if(deciphFile && !deciphPathEdit){
            DeciphFilePathTfd.setText("");
            DeciphFilePathTfd.setForeground(Color.BLACK);
            deciphPathEdit = true;
        }
    }//GEN-LAST:event_DeciphFilePathTfdMouseReleased

    private void HashFilePathTfdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HashFilePathTfdMouseReleased
        // TODO add your handling code here:
        if(hashFile && !hashPathEdit){
            HashFilePathTfd.setText("");
            HashFilePathTfd.setForeground(Color.BLACK);
            hashPathEdit = true;
        }
    }//GEN-LAST:event_HashFilePathTfdMouseReleased

    private void DeciphFilePathTfdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeciphFilePathTfdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeciphFilePathTfdActionPerformed

    private void ExitMniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMniActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitMniActionPerformed

    private void HelpMniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpMniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HelpMniActionPerformed

    private void AboutMniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMniActionPerformed
        // TODO add your handling code here:
        About dialog = new About(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setVisible(true);
    }//GEN-LAST:event_AboutMniActionPerformed

    private void CiphSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiphSaveBtnActionPerformed
        // TODO add your handling code here:
        boolean writable = false;
        OverWrite oW = new OverWrite(this, true);
        do{
            CiphFilePathSaveTfd.setText(null);
            FileChooser dialog = new FileChooser(this);
            url = dialog.saveFile();


            if(!(url == null)){

                //<editor-fold defaultstate="collapsed" desc="not necessary; left for repairs">
    //            //getting the file name from user
    //            SavaName name = new SavaName(this, true);
    //            name.addWindowListener(new java.awt.event.WindowAdapter() {
    //                        @Override
    //                        public void windowClosing(java.awt.event.WindowEvent e) {
    //                        }
    //                    });
    //            name.setVisible(true);

    //            //completing the fil path
    //            url = url.substring(0, url.length()-1)+name.getSaveName()+name.getExtension()+"\"";
    //</editor-fold>



                File f = new File(url);

                try {

                    if(f.exists()){
                        
                        CiphFilePathSaveTfd.setText(url);
                        
                        oW.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosing(java.awt.event.WindowEvent e) {
                            }
                        });
                        oW.setVisible(true);

                        if(oW.getOverWrite()){
                            f.delete();
                            f.createNewFile();
                            writable = true;
                        }
                    }
                    else{
                        CiphFilePathSaveTfd.setText(url);
                        
                        if(!(f.getParentFile().exists())){
                            f.getParentFile().mkdirs();
                        }
                        f.createNewFile();
                        writable = true;
                    }

                } catch (IOException ex) {
                    System.out.println(ex.toString());
                }
            }
        }while(!(oW.getOverWrite()||writable));
//        String text = "Votre cryptogramme:\n" + CipheredTaa.getText();
//        writeText(text,url);
        if(writable){
            writeText(CipheredTaa.getText(),url);
            Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/checkin32.png");
                    dialog.setMessage("Fichier sauvegargé!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
        }
        
        
    }//GEN-LAST:event_CiphSaveBtnActionPerformed

    private void CiphClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiphClearBtnActionPerformed
        // TODO add your handling code here:
        if(ciphText){
            CiphTextTaa.setText("");
        }
        if(ciphFile){
            CiphFilePathTfd.setText("");
        }
    }//GEN-LAST:event_CiphClearBtnActionPerformed

    private void CipherBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CipherBtnActionPerformed
        // TODO add your handling code here:
        if(ciphText){
            if("".equals(CiphTextTaa.getText())){
                CipheredTaa.setText(null);
            }
            else{
                writeText(CiphTextTaa.getText(),"Data/Users/User_id"+user.getUserId()+"/Plain_text/Ciph_text.txt");

                HashTextTaa.setText(CiphTextTaa.getText());

                SignTextTaa.setText(CiphTextTaa.getText());

                String ciphedText = ciphering("Data/Users/User_id"+user.getUserId()+"/Plain_text/Ciph_text.txt",inUseKey);
                CipheredTaa.setText(ciphedText);
                writeText(ciphedText,"Data/Users/User_id"+user.getUserId()+"/Result/Ciphered.txt");

                DeciphTextTaa.setForeground(Color.GRAY);
                DeciphTextTaa.setText(CipheredTaa.getText());

                ciphEdit = true;
            }
        }

        if(ciphFile){
            if(url == null){
                CipheredTaa.setText("");
                Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/failed.png");
                    dialog.setMessage("Veuillez Specifier le Chemin d'accès au fichier!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
            }
            else{
                url = CiphFilePathTfd.getText();
                writeText(readText(url),"Data/Users/User_id"+user.getUserId()+"/Plain_text/Ciph_text.txt");

                String ciphedText = ciphering("Data/Users/User_id"+user.getUserId()+"/Plain_text/Ciph_text.txt",inUseKey);
                CipheredTaa.setText(ciphedText);
                writeText(ciphedText,"Data/Users/User_id"+user.getUserId()+"/Result/Ciphered.txt");

                DeciphTextTaa.setForeground(Color.GRAY);
                DeciphTextTaa.setText(CipheredTaa.getText());

                ciphEdit = true;
            }
        }
    }//GEN-LAST:event_CipherBtnActionPerformed

    private void CiphFilePathSaveTfdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiphFilePathSaveTfdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CiphFilePathSaveTfdActionPerformed

    private void CiphBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiphBrowseBtnActionPerformed
        // TODO add your handling code here:
        FileChooser dialog = new FileChooser(this);
        url = dialog.openFile();
        if(!(url == null)){
            CiphFilePathTfd.setText(url);
            CiphTextTaa.setText(readText(url));
            ciphPathEdit = true;
        }
        

    }//GEN-LAST:event_CiphBrowseBtnActionPerformed

    private void CiphFilePathTfdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CiphFilePathTfdMouseReleased
        // TODO add your handling code here:
        if(ciphFile && !ciphPathEdit){
            CiphFilePathTfd.setText("");
            CiphFilePathTfd.setForeground(Color.BLACK);
            ciphPathEdit = true;
        }
    }//GEN-LAST:event_CiphFilePathTfdMouseReleased

    private void CiphTextTaaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CiphTextTaaMouseReleased
        // TODO add your handling code here:
        if(ciphText){
            if(!ciphEdit){
                CiphTextTaa.setText("");
                ciphEdit = true;
            }

            if(ciphText){
                CiphTextTaa.setForeground(Color.BLACK);
            }
        }
    }//GEN-LAST:event_CiphTextTaaMouseReleased

    private void CiphFileRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiphFileRbtnActionPerformed
        // TODO add your handling code here:
        CiphTextTaa.setEnabled(false);
        CiphFilePathTfd.setEnabled(true);
        CiphBrowseBtn.setEnabled(true);
        ciphText = false;
        ciphFile = true;
    }//GEN-LAST:event_CiphFileRbtnActionPerformed

    private void CiphTextRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiphTextRbtnActionPerformed
        // TODO add your handling code here:
        CiphTextTaa.setEnabled(true);
        CiphFilePathTfd.setEnabled(false);
        CiphBrowseBtn.setEnabled(false);
        ciphText = true;
        ciphFile = false;
    }//GEN-LAST:event_CiphTextRbtnActionPerformed

    private void HashSHA256RbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HashSHA256RbtnActionPerformed
        // TODO add your handling code here:
        hashMethod_Hashing = 1;
    }//GEN-LAST:event_HashSHA256RbtnActionPerformed

    private void HashWhirlpoolRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HashWhirlpoolRbtnActionPerformed
        // TODO add your handling code here:
        hashMethod_Hashing = 2;
    }//GEN-LAST:event_HashWhirlpoolRbtnActionPerformed

    private void SignSHA256RbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignSHA256RbtnActionPerformed
        // TODO add your handling code here:
        hashMethod_Signing = 1;
    }//GEN-LAST:event_SignSHA256RbtnActionPerformed

    private void SignWhirlpoolRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignWhirlpoolRbtnActionPerformed
        // TODO add your handling code here:
        hashMethod_Signing = 2;
    }//GEN-LAST:event_SignWhirlpoolRbtnActionPerformed

    private void AuthentTextRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthentTextRbtnActionPerformed
        // TODO add your handling code here:
        AuthentTextTaa.setEnabled(true);
        AuthentFilePathTfd.setEnabled(false);
        AuthentBrowseBtn.setEnabled(false);
        authentText = true;
        authentFile = false;
    }//GEN-LAST:event_AuthentTextRbtnActionPerformed

    private void AuthentFileRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthentFileRbtnActionPerformed
        // TODO add your handling code here:
        AuthentTextTaa.setEnabled(false);
        AuthentFilePathTfd.setEnabled(true);
        AuthentBrowseBtn.setEnabled(true);
        authentText = false;
        authentFile = true;
    }//GEN-LAST:event_AuthentFileRbtnActionPerformed

    private void AuthentTextTaaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AuthentTextTaaMouseReleased
        // TODO add your handling code here:
        if(authentText){
            if(!authentTextEdit){
                AuthentTextTaa.setText("");
                authentTextEdit = true;
            }

            if(authentText){
                AuthentTextTaa.setForeground(Color.BLACK);
            }
        }
    }//GEN-LAST:event_AuthentTextTaaMouseReleased

    private void AuthentBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthentBrowseBtnActionPerformed
        // TODO add your handling code here:
        FileChooser dialog = new FileChooser(this);
        url = dialog.openFile();
        if(!(url == null)){
            AuthentFilePathTfd.setText(url);
            AuthentTextTaa.setText(readText(url));
            authentPathEdit = true;
        }
    }//GEN-LAST:event_AuthentBrowseBtnActionPerformed

    private void AuthentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthentBtnActionPerformed
        // TODO add your handling code here:
        String hashCode1 = "";
        String hashCode2 = "";
        boolean authenticate = false;

        
        //<editor-fold defaultstate="collapsed" desc="hash computing">
        if(authentText){
//            if("".equals(AuthentTextTaa.getText())){
//                AuthenResultTaa.setText(null);
//            }
//            else{
                writeText(AuthentTextTaa.getText(), "Data/Users/User_id"+user.getUserId()+"/Plain_text/Authent.txt");
                
                switch(hashMethod_Authenticating){
                    case 1 :  hashCode1 = hashing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Authent.txt", 1);
                        break;
                    case 2 :  hashCode1 = hashing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Authent.txt", 2);
                        break;
                }
                
                authentTextEdit = true;
//            }
        }
        

        if(authentFile){
            if(url == null){
                AuthentResultTaa.setText("");
                Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/failed.png");
                    dialog.setMessage("Veuillez Specifier le Chemin d'accès au fichier!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
            }
            else{
                url = AuthentFilePathTfd.getText();
                writeText(readText(url),"Data/Users/User_id"+user.getUserId()+"/Plain_text/Authent.txt");
                
                switch(hashMethod_Authenticating){
                    case 1 :  hashCode1 = hashing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Authent.txt", 1);
                        break;
                    case 2 :  hashCode1 = hashing("Data/Users/User_id"+user.getUserId()+"/Plain_text/Authent.txt", 2);
                        break;
                }
                
                authentTextEdit = true;
            }
        }
        
//</editor-fold>
        
        //<editor-fold defaultstate="collapsed" desc="deciphering signature">
            if("".equals(DeciphTextTaa.getText())){
                AuthentResultTaa.setText("");
            }
            else{
                writeText(AuthentSignatureTfd.getText(), "Data/Users/User_id"+user.getUserId()+"/Plain_text/Authent.txt");

                hashCode2 = decipheringPubKey("Data/Users/User_id"+user.getUserId()+"/Plain_text/Authent.txt",inUseKey);

                authentSignatureEdit = true;
            }
        
//</editor-fold>
            
        //<editor-fold defaultstate="collapsed" desc="authenticity verification">
            authenticate = hashCode1.equals(hashCode2);
//</editor-fold>
            
        //<editor-fold defaultstate="collapsed" desc="printing result">
            if(authenticate){
                AuthentResultTaa.setText("L'empreinte du text vaut : \""+hashCode1+"\";\n"
                                       + "Et de la signature on a  : \""+hashCode2+"\";\n\n"
                                       + "Votre Message est authentique!");
                
                Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/checkin32.png");
                    dialog.setMessage("Votre Message est authentique!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
            }
            else{
                AuthentResultTaa.setText("L'empreinte du text vaut : \""+hashCode1+"\";\n"
                                       + "Et de la signature on a  : \""+hashCode2+"\";\n\n"
                                       + "Votre Message a été falcifié!");
                
                Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setIcon("src/RSA/Icons/alert32.png");
                    dialog.setMessage("Votre Message a été falcifié!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
            }
//</editor-fold>
    }//GEN-LAST:event_AuthentBtnActionPerformed

    private void AuthentTextClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthentTextClearBtnActionPerformed
        // TODO add your handling code here:
        if(authentText){
            AuthentTextTaa.setText("");
        }
        if(authentFile){
            AuthentFilePathTfd.setText("");
        }
    }//GEN-LAST:event_AuthentTextClearBtnActionPerformed

    private void AuthentSHA256RbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthentSHA256RbtnActionPerformed
        // TODO add your handling code here:
        hashMethod_Authenticating = 1;
    }//GEN-LAST:event_AuthentSHA256RbtnActionPerformed

    private void AuthentWhirlpoolRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthentWhirlpoolRbtnActionPerformed
        // TODO add your handling code here:
        hashMethod_Authenticating = 2;
    }//GEN-LAST:event_AuthentWhirlpoolRbtnActionPerformed

    private void AuthentSignatureClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthentSignatureClearBtnActionPerformed
        // TODO add your handling code here:
        AuthentSignatureTfd.setText("");

    }//GEN-LAST:event_AuthentSignatureClearBtnActionPerformed

    private void SignFilePathTfdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SignFilePathTfdMouseReleased
        // TODO add your handling code here:
        if(signFile && !signPathEdit){
            SignFilePathTfd.setText("");
            SignFilePathTfd.setForeground(Color.BLACK);
            signPathEdit = true;
        }
    }//GEN-LAST:event_SignFilePathTfdMouseReleased

    private void AuthentFilePathTfdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AuthentFilePathTfdMouseReleased
        // TODO add your handling code here:
        if(authentFile && !authentPathEdit){
            AuthentFilePathTfd.setText("");
            AuthentFilePathTfd.setForeground(Color.BLACK);
            authentPathEdit = true;
        }
    }//GEN-LAST:event_AuthentFilePathTfdMouseReleased

    private void AuthentSignatureTfdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AuthentSignatureTfdMouseReleased
        // TODO add your handling code here:
        if(!authentSignatureEdit){
            AuthentSignatureTfd.setText("");
            authentSignatureEdit = true;
        }

        if(authentText){
                AuthentSignatureTfd.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_AuthentSignatureTfdMouseReleased
    
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    
    //<editor-fold defaultstate="collapsed" desc="Properties  declaration">
    private RsaKey inUseKey;
    
    private BigInteger publicKey;
    private BigInteger privateKey;
    private BigInteger modulus;
    private int keySize;
    
    private boolean ciphText = true;
    private boolean ciphFile = false;
    private boolean ciphEdit = false;
    private boolean ciphPathEdit = false;
    
    private boolean deciphText = true;
    private boolean deciphFile = false;
    private boolean deciphEdit = false;
    private boolean deciphPathEdit = false;
    
    private boolean hashText = true;
    private boolean hashFile = false;
    private boolean hashEdit = false;
    private boolean hashPathEdit = false;
    
    private boolean signText = true;
    private boolean signFile = false;
    private boolean signEdit = false;
    private boolean signPathEdit = false;
    
    private boolean authentText = true;
    private boolean authentFile = false;
    private boolean authentTextEdit = false;
    private boolean authentPathEdit = false;
    private boolean authentSignatureEdit = false;
    
    private ArrayList <String> fileLines;
    
    private CurrentUser user;
    
    private String url;
    
    private int hashMethod_Hashing;
    private int hashMethod_Signing;
    private int hashMethod_Authenticating;
    
//</editor-fold>
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMni;
    private javax.swing.JButton AuthentBrowseBtn;
    private javax.swing.JButton AuthentBtn;
    private javax.swing.JLabel AuthentFileLbl;
    private javax.swing.JTextField AuthentFilePathTfd;
    private javax.swing.JRadioButton AuthentFileRbtn;
    private javax.swing.ButtonGroup AuthentGrpBtg;
    private javax.swing.JLabel AuthentLbl;
    private javax.swing.JTextArea AuthentResultTaa;
    private javax.swing.JRadioButton AuthentSHA256Rbtn;
    private javax.swing.JButton AuthentSignatureClearBtn;
    private javax.swing.JLabel AuthentSignatureLbl;
    private javax.swing.JTextField AuthentSignatureTfd;
    private javax.swing.JButton AuthentTextClearBtn;
    private javax.swing.JRadioButton AuthentTextRbtn;
    private javax.swing.JTextArea AuthentTextTaa;
    private javax.swing.JRadioButton AuthentWhirlpoolRbtn;
    private javax.swing.JPanel AuthentificationPnl;
    private javax.swing.JPanel AuthentificationPnl1;
    private javax.swing.JButton ChangeKeyBtn;
    private javax.swing.JButton CiphBrowseBtn;
    private javax.swing.JButton CiphClearBtn;
    private javax.swing.JLabel CiphFileLbl;
    private javax.swing.JTextField CiphFilePathSaveTfd;
    private javax.swing.JTextField CiphFilePathTfd;
    private javax.swing.JRadioButton CiphFileRbtn;
    private javax.swing.JLabel CiphFileSaveLbl;
    private javax.swing.ButtonGroup CiphGrpBtg;
    private javax.swing.JButton CiphSaveBtn;
    private javax.swing.JRadioButton CiphTextRbtn;
    private javax.swing.JTextArea CiphTextTaa;
    private javax.swing.JButton CipherBtn;
    private javax.swing.JLabel CipheredLbl;
    private javax.swing.JTextArea CipheredTaa;
    private javax.swing.JPanel CipheringPnl;
    private javax.swing.JButton CloseSessionBtn;
    private javax.swing.JButton DeciphBrowseBtn;
    private javax.swing.JButton DeciphClearBtn;
    private javax.swing.JLabel DeciphFileLbl;
    private javax.swing.JTextField DeciphFilePathSaveTfd;
    private javax.swing.JTextField DeciphFilePathTfd;
    private javax.swing.JRadioButton DeciphFileRbtn;
    private javax.swing.JLabel DeciphFileSaveLbl;
    private javax.swing.ButtonGroup DeciphGrpBtg;
    private javax.swing.JButton DeciphSaveBtn;
    private javax.swing.JRadioButton DeciphTextRbtn;
    private javax.swing.JTextArea DeciphTextTaa;
    private javax.swing.JButton DecipherBtn;
    private javax.swing.JLabel DecipheredLbl;
    private javax.swing.JTextArea DecipheredTaa;
    private javax.swing.JPanel DecipheringPnl;
    private javax.swing.JPanel DecipheringPnl1;
    private javax.swing.JMenu EditMnu;
    private javax.swing.JMenuItem ExitMni;
    private javax.swing.JMenu FileMnu;
    private javax.swing.JButton HashBrowseBtn;
    private javax.swing.JButton HashBtn;
    private javax.swing.JButton HashClearBtn;
    private javax.swing.JLabel HashCodeLbl;
    private javax.swing.JTextArea HashCodeTaa;
    private javax.swing.JLabel HashFileLbl;
    private javax.swing.JTextField HashFilePathSaveTfd;
    private javax.swing.JTextField HashFilePathTfd;
    private javax.swing.JRadioButton HashFileRbtn;
    private javax.swing.JLabel HashFileSaveLbl;
    private javax.swing.ButtonGroup HashGrpBtg;
    private javax.swing.ButtonGroup HashMethodBtg_Authenticating;
    private javax.swing.ButtonGroup HashMethodBtg_Hashing;
    private javax.swing.ButtonGroup HashMethodBtg_Signing;
    private javax.swing.JRadioButton HashSHA256Rbtn;
    private javax.swing.JButton HashSaveBtn;
    private javax.swing.JRadioButton HashTextRbtn;
    private javax.swing.JTextArea HashTextTaa;
    private javax.swing.JRadioButton HashWhirlpoolRbtn;
    private javax.swing.JPanel HashingPnl;
    private javax.swing.JPanel HashingPnl1;
    private javax.swing.JMenuItem HelpMni;
    private javax.swing.JMenu HelpMnu;
    private javax.swing.JLabel ImageLbl;
    private javax.swing.JLabel KeyDescriptionLbl;
    private javax.swing.JButton KeyDetailsBtn;
    private javax.swing.JLabel KeyIdentifierLbl;
    private javax.swing.JLabel KeySizeLbl;
    private javax.swing.JPanel MainPnl;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel ModulusLbl;
    private javax.swing.JLabel PrivateKeyLbl;
    private javax.swing.JLabel PublicKeyLbl;
    private javax.swing.JToggleButton RefreshBtn;
    private javax.swing.JPopupMenu.Separator Separator;
    private javax.swing.JLabel SessionLbl;
    private javax.swing.JPanel SessionPnl;
    private javax.swing.JButton SignBrowseBtn;
    private javax.swing.JButton SignBtn;
    private javax.swing.JButton SignClearBtn;
    private javax.swing.JLabel SignFileLbl;
    private javax.swing.JTextField SignFilePathSaveTfd;
    private javax.swing.JTextField SignFilePathTfd;
    private javax.swing.JRadioButton SignFileRbtn;
    private javax.swing.JLabel SignFileSaveLbl;
    private javax.swing.ButtonGroup SignGrpBtg;
    private javax.swing.JRadioButton SignSHA256Rbtn;
    private javax.swing.JButton SignSaveBtn;
    private javax.swing.JRadioButton SignTextRbtn;
    private javax.swing.JTextArea SignTextTaa;
    private javax.swing.JRadioButton SignWhirlpoolRbtn;
    private javax.swing.JLabel SignatureLbl;
    private javax.swing.JTextArea SignatureTaa;
    private javax.swing.JPanel SigningPnl;
    private javax.swing.JPanel SigningPnl1;
    private javax.swing.JTabbedPane TabbedPne;
    private javax.swing.JLabel UserDOB;
    private javax.swing.JLabel UserEmail;
    private javax.swing.JLabel UserIdentifierLbl;
    private javax.swing.JLabel UserName;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    // End of variables declaration//GEN-END:variables

//<editor-fold defaultstate="collapsed" desc="extracting the first line of Keys.txt correspponding to the key in use">
    private RsaKey extractKey() {
        Fichier f = new Fichier();
        // Open file in read mode
        f.openInRead("Data/Users/User_id"+user.getUserId()+"/Keys/Keys.txt");
        //Reads the first line of the file
        String readLine = f.read();
        
        if(!(readLine == null)){
            return new RsaKey(f.extractData(readLine,";"),0);
            //Separating infos with tokenizer and creating new RsaKey for return.
        }
        readLine = "-;0;0;0;0";
        return new RsaKey(f.extractData(readLine,";"),0);
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Writes a String into the specified file url">
    private void writeText(String text, String url) {
        Fichier file = new Fichier();
        // Open in write mode
        file.openInWrite(url);
        //Write the text
        System.out.println("\n###writing...");//for debugging
        file.writeL(text);
        System.out.println("###wrote!");//for debugging
        // Close the file
        file.closeFile();
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Reads the text from the specified file url">
    private String readText(String url) {
        Fichier file = new Fichier();
        String readLine;
        System.out.println("\n###reading...");//for debugging
        // Open file in read mode
        file.openInRead(url);
        
        System.out.println("###read!");//for debugging
        
        String readText = "";
        
        do{
            readLine = file.read();
            if(readLine != null){
                // reads lines in the file and concatenates them in the string readText.
                System.out.println("\n###readLine: \""+readLine+"\"");//for debugging
                System.out.println("###concatenating");//for debugging
                readText =  readText.concat(readLine+"\n");
            }
        }while( readLine != null);// ... while the read line is not null.
        
        file.closeFile();
        
        if(!readText.equals("")){
            readText = readText.substring(0, readText.length()-1);
        }
        System.out.println("\n###The final text is: \""+readText+"\"");//for debugging

        return readText;
        
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Reads the first line of the file's specified url">
    private String readFirstLine(String url){
        Fichier f = new Fichier();
        // Open file in read mode
        f.openInRead(url);
        //Reads the first line of the file
        System.out.println("\n###reading...");//for debugging
        String readLine = f.read();
        System.out.println("###read!");//for debugging
        System.out.println("###readLine: \""+readLine+"\"");//for debugging
        return readLine;
    }
//</editor-fold>
    
    
//<editor-fold defaultstate="collapsed" desc="Ciphering a text parsed as String with the specified key">
    private String ciphering(String url, RsaKey key) {
        
        int i = 0;
        byte[] segment;
        System.out.println("\n###In ciphering:");//for debugging
        
        System.out.println("###In ciphering: calling read function ->");//for debugging
        String text = readText(url);
        System.out.println("\n###In ciphering: The text is: \""+text+"\"");//for debugging
        System.out.println("###In ciphering: The length of the text is: "+text.length());//for debugging

        String ciphedText = "";
        
        System.out.println("###In ciphering: Getting the public key:");//for debugging
        BigInteger publicKeyBig = new BigInteger(key.getListInfo()[2]);
        BigInteger modulusBig = new BigInteger(key.getListInfo()[4]);
        BigInteger ciphedSegment;
        
        
        //Get the size of the key in byte
        int keyBytes = (int)Math.ceil(((float)modulusBig.bitLength())/8);
        System.out.println("###In ciphering: The key's size in bytes is: "+keyBytes);//for debugging
        
        //The length of the textByteArray is the size in byte of the text
        while(i < //<editor-fold defaultstate="collapsed" desc="Number of segments of size keyBytes-1">
                (int)((float)(text.length())/(keyBytes-1))
//</editor-fold>
                ){
            System.out.println("\n###In ciphering: In while: There are segments of size keyBytes-1");//for debugging
            //Extraction of a segment from the text, of size keyBytes-1 for ciphering
            segment = (text.substring(i*(keyBytes-1), (i+1)*(keyBytes-1))).getBytes();
            System.out.println("###In ciphering: In while: The Segment is: "+new String(segment));//for debugging
            
            //Changing segment to bigInteger and ciphering the segment
            ciphedSegment = (new BigInteger(segment)).modPow(publicKeyBig, modulusBig);
            System.out.println("###In ciphering: In while: The cipher is: "+ciphedSegment);
            //Getting the decimal String representation of this BigInteger
            //And concatenates it to the ciphed text.
            ciphedText = ciphedText.concat(ciphedSegment.toString()+" ");
            
            i++;//going to next segment
        }
        
        if(//<editor-fold defaultstate="collapsed" desc="The length in byte of the remain segment; which is less than keyBytes-1">
                (int)(text.length()%(keyBytes-1))
//</editor-fold>
                != 0){
            //Extraction of the last segment if it exists.
            System.out.println("\n###In ciphering: In if: The length in byte of the remaining segment is less than keyBytes-1");//for debugging
            segment = (text.substring(i*(keyBytes-1))).getBytes();
            System.out.println("###In ciphering: In if: The Segment is: "+new String(segment));//for debugging
            
            //Ciphering the remaining segment
            ciphedSegment = (new BigInteger(segment)).modPow(publicKeyBig, modulusBig);
            System.out.println("###In ciphering: In if: The cipher is: "+ciphedSegment);
            //Getting the decimal String representation of this BigInteger
            //And concatenates it to the ciphed text.
            ciphedText = ciphedText.concat(ciphedSegment.toString()+" ");
        }
        
        return ciphedText.substring(0, ciphedText.length()-1);
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Ciphering a text parsed as String with the specified key's private key for signing ">
    private String cipheringPrivKey(String url, RsaKey key) {
        
        int i = 0;
        byte[] segment;
        System.out.println("\n###In ciphering:");//for debugging
        
        System.out.println("###In ciphering: calling read function ->");//for debugging
        String text = readText(url);
        System.out.println("\n###In ciphering: The text is: \""+text+"\"");//for debugging
        System.out.println("###In ciphering: The length of the text is: "+text.length());//for debugging

        String ciphedText = "";
        
        System.out.println("###In ciphering: Getting the private key:");//for debugging
        BigInteger publicKeyBig = new BigInteger(key.getListInfo()[3]);
        BigInteger modulusBig = new BigInteger(key.getListInfo()[4]);
        BigInteger ciphedSegment;
        
        
        //Get the size of the key in byte
        int keyBytes = (int)Math.ceil(((float)modulusBig.bitLength())/8);
        System.out.println("###In ciphering: The key's size in bytes is: "+keyBytes);//for debugging
        
        //The length of the textByteArray is the size in byte of the text
        while(i < //<editor-fold defaultstate="collapsed" desc="Number of segments of size keyBytes-1">
                (int)((float)(text.length())/(keyBytes-1))
//</editor-fold>
                ){
            System.out.println("\n###In ciphering: In while: There are segments of size keyBytes-1");//for debugging
            //Extraction of a segment from the text, of size keyBytes-1 for ciphering
            segment = (text.substring(i*(keyBytes-1), (i+1)*(keyBytes-1))).getBytes();
            System.out.println("###In ciphering: In while: The Segment is: "+new String(segment));//for debugging
            
            //Changing segment to bigInteger and ciphering the segment
            ciphedSegment = (new BigInteger(segment)).modPow(publicKeyBig, modulusBig);
            System.out.println("###In ciphering: In while: The cipher is: "+ciphedSegment);
            //Getting the decimal String representation of this BigInteger
            //And concatenates it to the ciphed text.
            ciphedText = ciphedText.concat(ciphedSegment.toString()+" ");
            
            i++;//going to next segment
        }
        
        if(//<editor-fold defaultstate="collapsed" desc="The length in byte of the remain segment; which is less than keyBytes-1">
                (int)(text.length()%(keyBytes-1))
//</editor-fold>
                != 0){
            //Extraction of the last segment if it exists.
            System.out.println("\n###In ciphering: In if: The length in byte of the remaining segment is less than keyBytes-1");//for debugging
            segment = (text.substring(i*(keyBytes-1))).getBytes();
            System.out.println("###In ciphering: In if: The Segment is: "+new String(segment));//for debugging
            
            //Ciphering the remaining segment
            ciphedSegment = (new BigInteger(segment)).modPow(publicKeyBig, modulusBig);
            System.out.println("###In ciphering: In if: The cipher is: "+ciphedSegment);
            //Getting the decimal String representation of this BigInteger
            //And concatenates it to the ciphed text.
            ciphedText = ciphedText.concat(ciphedSegment.toString()+" ");
        }
        
        return ciphedText.substring(0, ciphedText.length()-1);
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Deciphering a cipher parse as string from the file url with the specified key">
    private String deciphering(String url, RsaKey key){
        //Reads the cipher line from file url
        System.out.println("\n###In deciphering:");//for debugging
        System.out.println("###In deciphering: calling read function ->");//for debugging
        String cipher = readFirstLine(url);
        
        System.out.println("\n###In deciphering: The cipher is: \""+cipher+"\"");//for debugging
        
        //extracting the ciph blocks using tokenizer
        String[] ciphersArray = new Fichier().extractData(cipher, " ");
        System.out.println("###In deciphering: Tokenizing the cipher  using token \" \"");//for debugging
        
        //Creating BigInteger arrays of length of ciphersArray's length
        BigInteger [] ciphersBigArray = new BigInteger[ciphersArray.length] ;
        BigInteger [] decipheredBigArray = new BigInteger[ciphersArray.length] ;
        
        //getting the necessary informations from the inUseKey
        BigInteger privateKeyBig = new BigInteger(key.getListInfo()[3]);
        BigInteger modulusBig = new BigInteger(key.getListInfo()[4]);
        System.out.println("###In deciphering: Getting the private key:");//for debugging
        
        //Creating  an array of deciphered blocks and final plain text
        String[] textArray = new String[ciphersArray.length];
        String plainText = "";
        
        //for ...
        for(int i = 0; i < ciphersArray.length; i++){
            System.out.println("\n###In deciphering: In For loop:");//for debugging

            //Obtain  the BigInteger form of the cipher block;
            ciphersBigArray[i] = new BigInteger(ciphersArray[i]);
            System.out.println("###In deciphering: In For loop: The cipher block is: \""+ciphersBigArray[i]+"\"");//for debugging
            
            //decipher the different BigInteger forms
            decipheredBigArray[i] = ciphersBigArray[i].modPow(privateKeyBig, modulusBig);
            System.out.println("###In deciphering: In For loop: The deciphered block is: \""+decipheredBigArray[i]+"\"");//for debugging
            
            //Convert the deciphered BigInteger forms into thier representative ByteArray and decoding them to blocks of clear text
            textArray[i] = new String(decipheredBigArray[i].toByteArray());
            System.out.println("###In deciphering: In For loop: The deciphered block converted to Byte   is: \""+Arrays.toString(decipheredBigArray[i].toByteArray())+"\"");//for debugging
            System.out.println("###In deciphering: In For loop: The deciphered block converted to String is: \""+textArray[i]+"\"");//for debugging
            
            //Concatenate the block of clear text.
            System.out.println("###In deciphering: In For loop: concatenating");//for debugging
            plainText = plainText.concat(textArray[i]);
        }
        
        System.out.println("###In deciphering: the final plain text is : \""+plainText+"\"");//for debugging

        return plainText;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Deciphering a cipher parse as string from the file url with the specified key's public key for authentication">
    private String decipheringPubKey(String url, RsaKey key){
        //Reads the cipher line from file url
        System.out.println("\n###In deciphering:");//for debugging
        System.out.println("###In deciphering: calling read function ->");//for debugging
        String cipher = readFirstLine(url);
        
        System.out.println("\n###In deciphering: The cipher is: \""+cipher+"\"");//for debugging
        
        //extracting the ciph blocks using tokenizer
        String[] ciphersArray = new Fichier().extractData(cipher, " ");
        System.out.println("###In deciphering: Tokenizing the cipher  using token \" \"");//for debugging
        
        //Creating BigInteger arrays of length of ciphersArray's length
        BigInteger [] ciphersBigArray = new BigInteger[ciphersArray.length] ;
        BigInteger [] decipheredBigArray = new BigInteger[ciphersArray.length] ;
        
        //getting the necessary informations from the inUseKey
        BigInteger privateKeyBig = new BigInteger(key.getListInfo()[2]);
        BigInteger modulusBig = new BigInteger(key.getListInfo()[4]);
        System.out.println("###In deciphering: Getting the public key:");//for debugging
        
        //Creating  an array of deciphered blocks and final plain text
        String[] textArray = new String[ciphersArray.length];
        String plainText = "";
        
        //for ...
        for(int i = 0; i < ciphersArray.length; i++){
            System.out.println("\n###In deciphering: In For loop:");//for debugging

            //Obtain  the BigInteger form of the cipher block;
            ciphersBigArray[i] = new BigInteger(ciphersArray[i]);
            System.out.println("###In deciphering: In For loop: The cipher block is: \""+ciphersBigArray[i]+"\"");//for debugging
            
            //decipher the different BigInteger forms
            decipheredBigArray[i] = ciphersBigArray[i].modPow(privateKeyBig, modulusBig);
            System.out.println("###In deciphering: In For loop: The deciphered block is: \""+decipheredBigArray[i]+"\"");//for debugging
            
            //Convert the deciphered BigInteger forms into thier representative ByteArray and decoding them to blocks of clear text
            textArray[i] = new String(decipheredBigArray[i].toByteArray());
            System.out.println("###In deciphering: In For loop: The deciphered block converted to Byte   is: \""+Arrays.toString(decipheredBigArray[i].toByteArray())+"\"");//for debugging
            System.out.println("###In deciphering: In For loop: The deciphered block converted to String is: \""+textArray[i]+"\"");//for debugging
            
            //Concatenate the block of clear text.
            System.out.println("###In deciphering: In For loop: concatenating");//for debugging
            plainText = plainText.concat(textArray[i]);
        }
        
        System.out.println("###In deciphering: the final plain text is : \""+plainText+"\"");//for debugging

        return plainText;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Provides the Hash Code of the text found in the file specified url">
    private String hashing(String url, int method) {
        System.out.println("###In Hashing: ");//for debugging
        
        System.out.println("###In Signing: calling read function ->");//for debugging
        String plainText = readText(url);
        System.out.println("\n###In Hashing: \""+plainText+"\"");//for debugging
        
        switch(method){
            case 1: {
                System.out.println("###In Hashing: SHA256 hashing...");//for debugging
                return new SHA256().SHA256Digest(plainText);
            }
            
            case 2:{
                System.out.println("###In Hashing: Whirlpool hashing...");//for debugging
                return new Whirlpool().affichexa(new Whirlpool().affichbin(new Whirlpool().whirl(plainText))).toLowerCase();
            }
        }
        
        return "error with switch statement";
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Provides the Signature of the text found in the file specified url">
    private String signing(String url, RsaKey key, int method) {
        System.out.println("\n###In Signing:");//for debugging
        
        System.out.println("###In Signing: calling hash function ->");//for debugging
        String hashCode = hashing(url,method);
        
        System.out.println("\n###In Signing: calling write function ->");
        writeText(hashCode, "Data/Users/User_id"+user.getUserId()+"/Result/buffer.txt");//for debugging
        
        System.out.println("\n###In Signing: calling ciphering function with private key ->");
        return cipheringPrivKey("Data/Users/User_id"+user.getUserId()+"/Result/buffer.txt", key);//for debugging
    }
//</editor-fold>


//<editor-fold defaultstate="collapsed" desc="Calls the Logon dialog box for user identifier and password  ">
    private void logOn() {
        LogOn dialog = new LogOn(this, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                System.exit(0);
            }
        });
        dialog.setVisible(true);
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Some initialisations before setting main frame visible ">
    private void initAll() {
        
        CiphGrpBtg.add(CiphFileRbtn);
        CiphGrpBtg.add(CiphTextRbtn);
        CiphTextRbtn.setSelected(true);
        CiphTextTaa.setEnabled(true);
        CiphTextTaa.setText("Text...");
        CiphFilePathTfd.setText("L'url du fichier...");
        CiphFilePathSaveTfd.setText("L'url de sauvegarde...");
        CiphFilePathTfd.setEnabled(false);
        CiphBrowseBtn.setEnabled(false);
        CiphTextTaa.setForeground(Color.GRAY);
        CiphFilePathTfd.setForeground(Color.GRAY);
        
        DeciphGrpBtg.add(DeciphFileRbtn);
        DeciphGrpBtg.add(DeciphTextRbtn);
        DeciphTextRbtn.setSelected(true);
        DeciphTextTaa.setEnabled(true);
        DeciphTextTaa.setText("Le chiffré...");
        DeciphFilePathTfd.setText("L'url du fichier...");
        DeciphFilePathSaveTfd.setText("L'url de sauvegarde...");
        DeciphFilePathTfd.setEnabled(false);
        DeciphBrowseBtn.setEnabled(false);
        DeciphTextTaa.setForeground(Color.GRAY);
        DeciphFilePathTfd.setForeground(Color.GRAY);
        
        HashGrpBtg.add(HashFileRbtn);
        HashGrpBtg.add(HashTextRbtn);
        HashTextRbtn.setSelected(true);
        HashTextTaa.setEnabled(true);
        HashTextTaa.setText("Text...");
        HashFilePathTfd.setText("L'url du fichier...");
        HashFilePathSaveTfd.setText("L'url de sauvegarde...");
        HashFilePathTfd.setEnabled(false);
        HashBrowseBtn.setEnabled(false);
        HashTextTaa.setForeground(Color.GRAY);
        HashFilePathTfd.setForeground(Color.GRAY);
        
        SignGrpBtg.add(SignFileRbtn);
        SignGrpBtg.add(SignTextRbtn);
        SignTextRbtn.setSelected(true);
        SignTextTaa.setEnabled(true);
        SignTextTaa.setText("Text...");
        SignFilePathTfd.setText("L'url du fichier...");
        SignFilePathSaveTfd.setText("L'url de sauvegarde...");
        SignFilePathTfd.setEnabled(false);
        SignBrowseBtn.setEnabled(false);
        SignTextTaa.setForeground(Color.GRAY);
        SignFilePathTfd.setForeground(Color.GRAY);
        
        AuthentGrpBtg.add(AuthentFileRbtn);
        AuthentGrpBtg.add(AuthentTextRbtn);
        AuthentTextRbtn.setSelected(true);
        AuthentTextTaa.setEnabled(true);
        AuthentTextTaa.setText("Text...");
        AuthentFilePathTfd.setText("L'url du fichier...");
        AuthentFilePathTfd.setEnabled(false);
        AuthentBrowseBtn.setEnabled(false);
        AuthentTextTaa.setForeground(Color.GRAY);
        AuthentFilePathTfd.setForeground(Color.GRAY);
        AuthentSignatureTfd.setForeground(Color.GRAY);
        
        HashMethodBtg_Hashing.add(HashSHA256Rbtn);
        HashMethodBtg_Hashing.add(HashWhirlpoolRbtn);
        HashSHA256Rbtn.setSelected(true);
        hashMethod_Hashing = 1; 

        HashMethodBtg_Signing.add(SignSHA256Rbtn);
        HashMethodBtg_Signing.add(SignWhirlpoolRbtn);
        SignSHA256Rbtn.setSelected(true);
        hashMethod_Signing = 1; 

        HashMethodBtg_Authenticating.add(AuthentSHA256Rbtn);
        HashMethodBtg_Authenticating.add(AuthentWhirlpoolRbtn);
        AuthentSHA256Rbtn.setSelected(true);
        hashMethod_Authenticating = 1; 
        
        /*Hash methods matching:
        1 = SHA256
        2 = Whirlpool
        */
        
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Prints all information on the curently used key">
    private void displayInUseKey() {
        KeyIdentifierLbl.setText(inUseKey.getListInfo()[0]);
        KeySizeLbl.setText(inUseKey.getListInfo()[1]+"bits");
        PublicKeyLbl.setText("("+inUseKey.getListInfo()[2]+", "+inUseKey.getListInfo()[4]+")");
        if(inUseKey.getListInfo()[3].equals("-")){
            PrivateKeyLbl.setText("-");
        }
        else{
            PrivateKeyLbl.setText("("+inUseKey.getListInfo()[3]+", "+inUseKey.getListInfo()[4]+")");
        }
        ModulusLbl.setText(inUseKey.getListInfo()[4]);
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Set the different properties of the instantiated object">
    private void setProperties() {
        setInUseKey(extractKey());
        setKeySize(Integer.parseInt(inUseKey.getListInfo()[1]));
        setPublicKey(new BigInteger(inUseKey.getListInfo()[2]));
        setPrivateKey(new BigInteger(inUseKey.getListInfo()[3]));
        setModulus(new BigInteger(inUseKey.getListInfo()[4]));
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Displays current user info">
    private void displayUserInfo() {
        UserIdentifierLbl.setText(user.getIdentifier());
        UserName.setText(user.getFirstName()+" "+user.getLastName());
        UserDOB.setText("Né(e) le "+user.getDOB());
        UserEmail.setText(user.getEMail());
    }
//</editor-fold>
}
