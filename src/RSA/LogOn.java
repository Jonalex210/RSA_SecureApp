/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RSA;

import Hash.SHA256;
import java.awt.Color;
import java.util.ArrayList;

/**
 *
 * @author Mvami N. Jonalex
 */
public class LogOn extends javax.swing.JDialog {

    /**
     * Creates new form LogOn
     */
    public LogOn(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        PasswordPfd.setForeground(Color.gray);
        IdentifierTfd.setForeground(Color.gray);
        
        user = new CurrentUser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IdentificationPnl = new javax.swing.JPanel();
        IdentifierLbl = new javax.swing.JLabel();
        PasswordLbl = new javax.swing.JLabel();
        IdentifierTfd = new javax.swing.JTextField();
        PasswordPfd = new javax.swing.JPasswordField();
        ValidateBtn = new javax.swing.JButton();
        LogInBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(421, 245));
        setResizable(false);

        IdentificationPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), " Identification "));
        IdentificationPnl.setPreferredSize(new java.awt.Dimension(420, 230));

        IdentifierLbl.setText("Identifiant :");

        PasswordLbl.setText("Mot de passe : ");

        IdentifierTfd.setText("ex: Johnny");
        IdentifierTfd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IdentifierTfdMouseReleased(evt);
            }
        });
        IdentifierTfd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IdentifierTfdActionPerformed(evt);
            }
        });
        IdentifierTfd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                IdentifierTfdKeyReleased(evt);
            }
        });

        PasswordPfd.setText("password");
        PasswordPfd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                PasswordPfdMouseReleased(evt);
            }
        });
        PasswordPfd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PasswordPfdKeyReleased(evt);
            }
        });

        ValidateBtn.setText("Valider");
        ValidateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValidateBtnActionPerformed(evt);
            }
        });
        ValidateBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ValidateBtnKeyReleased(evt);
            }
        });

        LogInBtn.setText("Nouveau Compte");
        LogInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogInBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Bienvenu dans l'application RSA SecureApp. Entrer votre identifiant et mot de passe ou creer un nouveau compte.");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout IdentificationPnlLayout = new javax.swing.GroupLayout(IdentificationPnl);
        IdentificationPnl.setLayout(IdentificationPnlLayout);
        IdentificationPnlLayout.setHorizontalGroup(
            IdentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IdentificationPnlLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(IdentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IdentificationPnlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ValidateBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LogInBtn))
                    .addGroup(IdentificationPnlLayout.createSequentialGroup()
                        .addGroup(IdentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PasswordLbl)
                            .addGroup(IdentificationPnlLayout.createSequentialGroup()
                                .addComponent(IdentifierLbl)
                                .addGap(32, 32, 32)
                                .addGroup(IdentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(IdentifierTfd)
                                    .addComponent(PasswordPfd, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(IdentificationPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        IdentificationPnlLayout.setVerticalGroup(
            IdentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IdentificationPnlLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(IdentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IdentifierLbl)
                    .addComponent(IdentifierTfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IdentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordLbl)
                    .addComponent(PasswordPfd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IdentificationPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValidateBtn)
                    .addComponent(LogInBtn))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IdentificationPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IdentificationPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ValidateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValidateBtnActionPerformed
        // TODO add your handling code here:
        if(IdentifierTfd.getText().equals("")||PasswordPfd.getText().equals("")){
            Message dialog = new Message(this, true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                }
            });
            dialog.setMessage("Entrez les champs!");
            dialog.displayMessage();
            dialog.setVisible(true);
            
            error = true;
        }
        else{
            if(!userExist(IdentifierTfd.getText())){
                Message dialog = new Message(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setMessage("L'identifiant n'exite pas!");
                dialog.displayMessage();
                dialog.setVisible(true);
                IdentifierTfd.setForeground(Color.red);
                IdenEdit = false;

                error = true;
            }
            else{
                if(!verifyPassword(new SHA256().SHA256Digest(PasswordPfd.getText()))){
                    Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setMessage("Mot de passe incorrecte!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
                    PasswordPfd.setForeground(Color.red);
                    PWEdit = false;

                    error = true;
                }
            }
        }
        
        if(!error){
            rearrange(userPosition);
            
            dispose();
        }
        
        error = false;
    }//GEN-LAST:event_ValidateBtnActionPerformed

    private void IdentifierTfdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IdentifierTfdMouseReleased
        // TODO add your handling code here:
         if(!IdenEdit){
            IdentifierTfd.setForeground(Color.black);
            IdentifierTfd.setText("");
            IdenEdit = true;
        }
    }//GEN-LAST:event_IdentifierTfdMouseReleased

    private void PasswordPfdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PasswordPfdMouseReleased
        // TODO add your handling code here:
        if(!PWEdit){
            PasswordPfd.setForeground(Color.black);
            PasswordPfd.setText("");
            PWEdit = true;
        }
    }//GEN-LAST:event_PasswordPfdMouseReleased

    private void ValidateBtnKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ValidateBtnKeyReleased
        // TODO add your handling code here:
        if(IdentifierTfd.getText().equals("")||PasswordPfd.getText().equals("")){
           Message dialog = new Message(this, true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                }
            });
            dialog.setMessage("Entrez les champs!");
            dialog.displayMessage();
            dialog.setVisible(true);
            
            error = true;
        }
        else{
            if(!userExist(IdentifierTfd.getText())){
                Message dialog = new Message(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setMessage("L'identifiant n'exite pas!");
                dialog.displayMessage();
                dialog.setVisible(true);
                IdentifierTfd.setForeground(Color.red);
                IdenEdit = false;

                error = true;
            }
            else{
                if(!verifyPassword(new SHA256().SHA256Digest(PasswordPfd.getText()))){
                    Message dialog = new Message(this, true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                        }
                    });
                    dialog.setMessage("Mot de passe incorrecte!");
                    dialog.displayMessage();
                    dialog.setVisible(true);
                    PasswordPfd.setForeground(Color.red);
                    PWEdit = false;

                    error = true;
                }
            }
        }
        
        if(!error){
            rearrange(userPosition);
            
            dispose();
        }
        
        error = false;
    }//GEN-LAST:event_ValidateBtnKeyReleased

    private void IdentifierTfdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IdentifierTfdKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == 10) ValidateBtnKeyReleased(evt);
    }//GEN-LAST:event_IdentifierTfdKeyReleased

    private void PasswordPfdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PasswordPfdKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == 10) ValidateBtnKeyReleased(evt);
    }//GEN-LAST:event_PasswordPfdKeyReleased

    private void LogInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogInBtnActionPerformed
        // TODO add your handling code here:
                LogIn dialog = new LogIn(this, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setVisible(true);
                
                user = new CurrentUser();
                
                IdentifierTfd.setText(user.getIdentifier());
                PasswordPfd.setText("");
    }//GEN-LAST:event_LogInBtnActionPerformed

    private void IdentifierTfdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IdentifierTfdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IdentifierTfdActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(LogOn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(LogOn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(LogOn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(LogOn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                LogOn dialog = new LogOn(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    //<editor-fold defaultstate="collapsed" desc="properties">
    private String identifier;
    private String passwordHash;
    
    private ArrayList <String> UsersInfoArray;
    
    private boolean IdenEdit = false;
    private boolean PWEdit = false;
    
    private boolean error = false;
    
    private int userPosition = 0;
    
    private CurrentUser user;
//</editor-fold>
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel IdentificationPnl;
    private javax.swing.JLabel IdentifierLbl;
    private javax.swing.JTextField IdentifierTfd;
    private javax.swing.JButton LogInBtn;
    private javax.swing.JLabel PasswordLbl;
    private javax.swing.JPasswordField PasswordPfd;
    private javax.swing.JButton ValidateBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    //<editor-fold defaultstate="collapsed" desc="set methods">
    private void setIdentifier(String tmp){
        identifier = tmp;
    }
    
    private void setPasswordHash(String tmp){
        passwordHash = tmp;
    }
//</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="get methods">
    private String getIdentifier(){
        return identifier;
    }
    
    private String getPasswordHash(){
        return passwordHash;
    }
//</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="methods">
    private void writeUserInfo(String url) {
        Fichier file = new Fichier();
        // Open in write mode
        file.openInWrite(url);
        // Go through the array
        for (String elt : UsersInfoArray) {
            // Ecrire l'élément (contact) courant
            file.write(elt);
        }
        // Fermer le fichier
        file.closeFile();
    }
    
    private void readUserInfo(String url) {
        UsersInfoArray = new ArrayList();
        Fichier file = new Fichier();
        // Open file in read mode
        file.openInRead(url);
        String readLine;
        // do ...
        do {
            // read line
            readLine = file.read();
            if (readLine != null){
                //Add read line to array list
                UsersInfoArray.add(readLine);
            }
            // ... while the read line is not null.
        } while (readLine != null);
        file.closeFile();
    }
    
    private boolean userExist(String iden){
        
        userPosition = 0;
        readUserInfo("Data/Users/Users.txt");
        for(String elt: UsersInfoArray){
            if(iden.equals((new Fichier().extractData(elt, ";"))[2])){
                return true;
            }
            userPosition++;
        }
        return false;
    }
    
    private boolean verifyPassword(String passHash){
        
        readUserInfo("Data/Users/Users.txt");
        for(String elt: UsersInfoArray){
            if(passHash.equals((new Fichier().extractData(elt, ";"))[3])){
                return true;
            }
        }
        return false;
    }
    
    private void rearrange(int pos){
        readUserInfo("Data/Users/Users.txt");
        String tmp;
        
        tmp = UsersInfoArray.get(pos);
        UsersInfoArray.remove(pos);
        UsersInfoArray.add(0, tmp);
        
        writeUserInfo("Data/Users/Users.txt");
    }
//</editor-fold>
    
    
}
